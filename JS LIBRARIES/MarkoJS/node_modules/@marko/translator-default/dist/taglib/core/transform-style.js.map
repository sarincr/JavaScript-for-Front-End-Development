{"version":3,"sources":["../../../src/taglib/core/transform-style.js"],"names":["STYLE_REG","tag","hub","node","deps","file","metadata","marko","rawValue","matchedBlock","exec","parentPath","isProgram","get","buildCodeFrameError","some","dep","style","styleFile","startContent","type","codeSartOffset","length","codeEndOffset","lastIndexOf","code","slice","base","path","basename","opts","filename","start","extra","nameStart","push","startPos","endPos","virtualPath","remove"],"mappings":"uJAAA;AACA;;AAEA,MAAMA,SAAS,GAAG,4BAAlB;;AAEe,kBAAUC,GAAV,EAAe;AAC5B,QAAM,EAAEC,GAAF,EAAOC,IAAP,KAAgBF,GAAtB;AACA,QAAM,EAAEG,IAAF,KAAWF,GAAG,CAACG,IAAJ,CAASC,QAAT,CAAkBC,KAAnC;AACA,QAAM,EAAEC,QAAF,KAAeL,IAArB;AACA,QAAMM,YAAY,GAAGT,SAAS,CAACU,IAAV,CAAeF,QAAf,CAArB;AACA,MAAI,CAACC,YAAL,EAAmB;AACjB;AACD;;AAED,MAAI,CAACR,GAAG,CAACU,UAAJ,CAAeC,SAAf,EAAL,EAAiC;AAC/B,UAAMX,GAAG;AACNY,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,8DAHE,CAAN;;AAKD;;AAED,MAAIV,IAAI,CAACW,IAAL,CAAU,CAAAC,GAAG,KAAIA,GAAG,CAACC,KAArB,CAAJ,EAAiC;AAC/B,UAAMhB,GAAG;AACNY,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,gEAHE,CAAN;;AAKD;;AAED,MAAI,gCAAkBb,GAAlB,EAAuBiB,SAA3B,EAAsC;AACpC,UAAMjB,GAAG;AACNY,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,wGAHE,CAAN;;AAKD;;AAED,QAAM,CAACK,YAAD,EAAeC,IAAI,GAAG,KAAtB,IAA+BX,YAArC;AACA,QAAMY,cAAc,GAAGF,YAAY,CAACG,MAApC;AACA,QAAMC,aAAa,GAAGf,QAAQ,CAACgB,WAAT,CAAqB,GAArB,CAAtB;AACA,QAAMC,IAAI,GAAGjB,QAAQ,CAACkB,KAAT,CAAeL,cAAf,EAA+BE,aAA/B,CAAb;AACA,QAAMI,IAAI,GAAGC,cAAKC,QAAL,CAAc3B,GAAG,CAACG,IAAJ,CAASyB,IAAT,CAAcC,QAA5B,CAAb;AACA,QAAMC,KAAK,GAAG7B,IAAI,CAAC8B,KAAL,IAAc9B,IAAI,CAAC8B,KAAL,CAAWC,SAAvC;;AAEA9B,EAAAA,IAAI,CAAC+B,IAAL,CAAU;AACRf,IAAAA,IADQ;AAERK,IAAAA,IAFQ;AAGRR,IAAAA,KAAK,EAAE,IAHC;AAIRmB,IAAAA,QAAQ,EAAEJ,KAAK,GAAGX,cAJV;AAKRgB,IAAAA,MAAM,EAAEL,KAAK,GAAGT,aALR;AAMRK,IAAAA,IAAI,EAAG,KAAID,IAAK,EANR;AAORW,IAAAA,WAAW,EAAG,KAAIX,IAAK,IAAGP,IAAK,EAPvB,EAAV;;;AAUAnB,EAAAA,GAAG,CAACsC,MAAJ;AACD","sourcesContent":["import path from \"path\";\nimport getComponentFiles from \"../../util/get-component-files\";\n\nconst STYLE_REG = /^style(?:\\.([^\\s]+))?\\s*\\{/;\n\nexport default function (tag) {\n  const { hub, node } = tag;\n  const { deps } = hub.file.metadata.marko;\n  const { rawValue } = node;\n  const matchedBlock = STYLE_REG.exec(rawValue);\n  if (!matchedBlock) {\n    return;\n  }\n\n  if (!tag.parentPath.isProgram()) {\n    throw tag\n      .get(\"name\")\n      .buildCodeFrameError(\n        \"Style blocks must be at the root of your Marko template.\"\n      );\n  }\n\n  if (deps.some(dep => dep.style)) {\n    throw tag\n      .get(\"name\")\n      .buildCodeFrameError(\n        \"A Marko file can only contain a single inline style block.\"\n      );\n  }\n\n  if (getComponentFiles(tag).styleFile) {\n    throw tag\n      .get(\"name\")\n      .buildCodeFrameError(\n        'A Marko file can either have an inline style block, or an external \"style.ext\" file, but not both.'\n      );\n  }\n\n  const [startContent, type = \"css\"] = matchedBlock;\n  const codeSartOffset = startContent.length;\n  const codeEndOffset = rawValue.lastIndexOf(\"}\");\n  const code = rawValue.slice(codeSartOffset, codeEndOffset);\n  const base = path.basename(hub.file.opts.filename);\n  const start = node.extra && node.extra.nameStart;\n\n  deps.push({\n    type,\n    code,\n    style: true,\n    startPos: start + codeSartOffset,\n    endPos: start + codeEndOffset,\n    path: `./${base}`,\n    virtualPath: `./${base}.${type}`\n  });\n\n  tag.remove();\n}\n"],"file":"transform-style.js"}