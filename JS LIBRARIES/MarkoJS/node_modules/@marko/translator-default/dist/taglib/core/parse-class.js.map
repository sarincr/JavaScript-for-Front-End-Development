{"version":3,"sources":["../../../src/taglib/core/parse-class.js"],"names":["path","node","hub","file","rawValue","code","name","start","meta","metadata","marko","componentFile","get","buildCodeFrameError","hasComponent","parsed","id","superClass","constructorProp","body","find","prop","t","isClassMethod","kind","key","replaceWith","markoClass"],"mappings":"uJAAA;AACA;AACA;;AAEe,kBAAUA,IAAV,EAAgB;AAC7B,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,GAAG,EAAE,EAAEC,IAAF,EAFD;AAGFH,EAAAA,IAHJ;AAIA,QAAM;AACJI,IAAAA,QAAQ,EAAEC,IADN;AAEJC,IAAAA,IAAI,EAAE,EAAEC,KAAF,EAFF;AAGFN,EAAAA,IAHJ;AAIA,QAAMO,IAAI,GAAGL,IAAI,CAACM,QAAL,CAAcC,KAA3B;;AAEA,MAAI,gCAAkBV,IAAlB,EAAwBW,aAA5B,EAA2C;AACzC,UAAMX,IAAI;AACPY,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,gGAHE,CAAN;;AAKD;;AAED,MAAIL,IAAI,CAACM,YAAT,EAAuB;AACrB,UAAMd,IAAI;AACPY,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,0DAHE,CAAN;;AAKD;;AAED,QAAME,MAAM,GAAG,iCAAgBZ,IAAhB,EAAsBE,IAAtB,EAA4BE,KAA5B,CAAf;;AAEA,MAAIQ,MAAM,CAACC,EAAX,EAAe;AACb,UAAMb,IAAI,CAACU,mBAAL;AACJE,IAAAA,MAAM,CAACC,EADH;AAEJ,yCAFI,CAAN;;AAID;;AAED,MAAID,MAAM,CAACE,UAAX,EAAuB;AACrB,UAAMd,IAAI,CAACU,mBAAL;AACJE,IAAAA,MAAM,CAACE,UADH;AAEJ,gDAFI,CAAN;;AAID;;AAED,QAAMC,eAAe,GAAGH,MAAM,CAACI,IAAP,CAAYA,IAAZ,CAAiBC,IAAjB;AACtB,GAAAC,IAAI,KAAIC,gBAAEC,aAAF,CAAgBF,IAAhB,KAAyBA,IAAI,CAACG,IAAL,KAAc,aADzB,CAAxB;;AAGA,MAAIN,eAAJ,EAAqB;AACnB,UAAMf,IAAI,CAACU,mBAAL;AACJK,IAAAA,eAAe,CAACO,GADZ;AAEJ,sFAFI,CAAN;;AAID;;AAEDjB,EAAAA,IAAI,CAACM,YAAL,GAAoB,IAApB;AACAd,EAAAA,IAAI,CAAC0B,WAAL,CAAiBJ,gBAAEK,UAAF,CAAaZ,MAAM,CAACI,IAApB,CAAjB;AACD","sourcesContent":["import { types as t } from \"@marko/compiler\";\nimport { parseExpression } from \"@marko/babel-utils\";\nimport getComponentFiles from \"../../util/get-component-files\";\n\nexport default function (path) {\n  const {\n    node,\n    hub: { file }\n  } = path;\n  const {\n    rawValue: code,\n    name: { start }\n  } = node;\n  const meta = file.metadata.marko;\n\n  if (getComponentFiles(path).componentFile) {\n    throw path\n      .get(\"name\")\n      .buildCodeFrameError(\n        'A Marko file can either have an inline class, or an external \"component.js\", but not both.'\n      );\n  }\n\n  if (meta.hasComponent) {\n    throw path\n      .get(\"name\")\n      .buildCodeFrameError(\n        \"A Marko component can only have one top level class.\"\n      );\n  }\n\n  const parsed = parseExpression(file, code, start);\n\n  if (parsed.id) {\n    throw file.buildCodeFrameError(\n      parsed.id,\n      \"Component class cannot have a name.\"\n    );\n  }\n\n  if (parsed.superClass) {\n    throw file.buildCodeFrameError(\n      parsed.superClass,\n      \"Component class cannot have a super class.\"\n    );\n  }\n\n  const constructorProp = parsed.body.body.find(\n    prop => t.isClassMethod(prop) && prop.kind === \"constructor\"\n  );\n  if (constructorProp) {\n    throw file.buildCodeFrameError(\n      constructorProp.key,\n      \"The constructor method should not be used for a component, use onCreate instead.\"\n    );\n  }\n\n  meta.hasComponent = true;\n  path.replaceWith(t.markoClass(parsed.body));\n}\n"],"file":"parse-class.js"}