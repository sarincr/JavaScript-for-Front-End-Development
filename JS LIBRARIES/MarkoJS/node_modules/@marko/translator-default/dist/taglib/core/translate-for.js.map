{"version":3,"sources":["../../../src/taglib/core/translate-for.js"],"names":["exit","path","node","attributes","body","params","namePath","get","ofAttr","findName","inAttr","fromAttr","toAttr","block","t","blockStatement","forNode","allowedAttributes","push","keyParam","valParam","buildCodeFrameError","unshift","variableDeclaration","variableDeclarator","memberExpression","value","forInStatement","ofAttrValue","loopParam","indexName","scope","generateUidIdentifier","name","numericLiteral","updateExpression","forOfStatement","stepAttr","stepValue","indexParam","stepsName","stepName","binaryExpression","forStatement","replaceWithMultiple","concat","arr","find","obj"],"mappings":"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","sourcesContent":["import { types as t } from \"@marko/compiler\";\nimport { assertAllowedAttributes } from \"@marko/babel-utils\";\n\nexport function exit(path) {\n  const { node } = path;\n  const {\n    attributes,\n    body: { body, params }\n  } = node;\n  const namePath = path.get(\"name\");\n  const ofAttr = findName(attributes, \"of\");\n  const inAttr = findName(attributes, \"in\");\n  const fromAttr = findName(attributes, \"from\");\n  const toAttr = findName(attributes, \"to\");\n  const block = t.blockStatement(body);\n  let forNode;\n  let allowedAttributes = [\"by\"];\n\n  if (inAttr) {\n    allowedAttributes.push(\"in\");\n\n    const [keyParam, valParam] = params;\n\n    if (!keyParam) {\n      throw namePath.buildCodeFrameError(\n        \"Invalid 'for in' tag, missing |key, value| params.\"\n      );\n    }\n\n    if (valParam) {\n      block.body.unshift(\n        t.variableDeclaration(\"const\", [\n          t.variableDeclarator(\n            valParam,\n            t.memberExpression(inAttr.value, keyParam, true)\n          )\n        ])\n      );\n    }\n\n    forNode = t.forInStatement(\n      t.variableDeclaration(\"const\", [t.variableDeclarator(keyParam)]),\n      inAttr.value,\n      block\n    );\n  } else if (ofAttr) {\n    let ofAttrValue = ofAttr.value;\n    allowedAttributes.push(\"of\");\n\n    const [valParam, keyParam, loopParam] = params;\n\n    if (!valParam) {\n      throw namePath.buildCodeFrameError(\n        \"Invalid 'for of' tag, missing |value, index| params.\"\n      );\n    }\n\n    forNode = [];\n\n    if (keyParam) {\n      const indexName = path.scope.generateUidIdentifier(keyParam.name);\n      forNode.push(\n        t.variableDeclaration(\"let\", [\n          t.variableDeclarator(indexName, t.numericLiteral(0))\n        ])\n      );\n\n      block.body.unshift(\n        t.variableDeclaration(\"let\", [\n          t.variableDeclarator(keyParam, t.updateExpression(\"++\", indexName))\n        ])\n      );\n    }\n\n    if (loopParam) {\n      ofAttrValue = loopParam;\n      forNode.push(\n        t.variableDeclaration(\"const\", [\n          t.variableDeclarator(loopParam, ofAttr.value)\n        ])\n      );\n    }\n\n    forNode.push(\n      t.forOfStatement(\n        t.variableDeclaration(\"const\", [t.variableDeclarator(valParam)]),\n        ofAttrValue,\n        block\n      )\n    );\n  } else if (fromAttr && toAttr) {\n    allowedAttributes.push(\"from\", \"to\", \"step\");\n\n    const stepAttr = findName(attributes, \"step\") || {\n      value: t.numericLiteral(1)\n    };\n    const stepValue = stepAttr ? stepAttr.value : t.numericLiteral(1);\n    const [indexParam] = params;\n    const stepsName = path.scope.generateUidIdentifier(\"steps\");\n    const stepName = path.scope.generateUidIdentifier(\"step\");\n\n    if (indexParam) {\n      block.body.unshift(\n        t.variableDeclaration(\"const\", [\n          t.variableDeclarator(\n            indexParam,\n            t.binaryExpression(\n              \"+\",\n              fromAttr.value,\n              t.binaryExpression(\"*\", stepName, stepValue)\n            )\n          )\n        ])\n      );\n    }\n\n    forNode = t.forStatement(\n      t.variableDeclaration(\"let\", [\n        t.variableDeclarator(\n          stepsName,\n          t.binaryExpression(\n            \"/\",\n            t.binaryExpression(\"-\", toAttr.value, fromAttr.value),\n            stepValue\n          )\n        ),\n        t.variableDeclarator(stepName, t.numericLiteral(0))\n      ]),\n      t.binaryExpression(\"<=\", stepName, stepsName),\n      t.updateExpression(\"++\", stepName),\n      block\n    );\n  } else {\n    throw namePath.buildCodeFrameError(\n      \"Invalid 'for' tag, missing an 'of', 'in' or 'to' attribute.\"\n    );\n  }\n\n  assertAllowedAttributes(path, allowedAttributes);\n  path.replaceWithMultiple([].concat(forNode));\n}\n\nfunction findName(arr, value) {\n  return arr.find(obj => obj.name === value);\n}\n"],"file":"translate-for.js"}