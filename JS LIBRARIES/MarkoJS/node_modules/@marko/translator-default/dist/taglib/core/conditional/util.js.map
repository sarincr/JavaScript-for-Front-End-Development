{"version":3,"sources":["../../../../src/taglib/core/conditional/util.js"],"names":["buildIfStatement","path","args","length","name","get","buildCodeFrameError","node","value","ifStatement","t","sequenceExpression","blockStatement","body","nextPath","getNextSibling","isMarkoTag","nextTagName","isStringLiteral"],"mappings":"wKAAA;AACA;;AAEO,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AAC3C,MAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,MAAnB,EAA2B;AACzB,UAAMC,IAAI,GAAGH,IAAI,CAACI,GAAL,CAAS,MAAT,CAAb;AACA,UAAMD,IAAI,CAACE,mBAAL;AACH,iBAAYF,IAAI,CAACG,IAAL,CAAUC,KAAM,qCAAoCJ,IAAI,CAACG,IAAL,CAAUC,KAAM,WAD7E,CAAN;;AAGD;;AAED,QAAMC,WAAW,GAAGC,gBAAED,WAAF;AAClBP,EAAAA,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBD,IAAI,CAAC,CAAD,CAAxB,GAA8BQ,gBAAEC,kBAAF,CAAqBT,IAArB,CADZ;AAElBQ,kBAAEE,cAAF,CAAiBX,IAAI,CAACM,IAAL,CAAUM,IAAV,CAAeA,IAAhC,CAFkB,CAApB;;;AAKA,MAAIC,QAAQ,GAAGb,IAAI,CAACc,cAAL,EAAf;;AAEA;AACA,MAAID,QAAQ,CAACE,UAAT,EAAJ,EAA2B;AACzB,UAAMC,WAAW,GAAGH,QAAQ,CAACT,GAAT,CAAa,MAAb,CAApB;AACA;AACEY,IAAAA,WAAW,CAACC,eAAZ,CAA4B,EAAEV,KAAK,EAAE,MAAT,EAA5B;AACAS,IAAAA,WAAW,CAACC,eAAZ,CAA4B,EAAEV,KAAK,EAAE,SAAT,EAA5B,CAFF;AAGE;AACAM,MAAAA,QAAQ,CAACP,IAAT,CAAcE,WAAd,GAA4BA,WAA5B;AACD;AACF;;AAED,SAAO,mCAAqBA,WAArB,EAAkCR,IAAI,CAACM,IAAvC,CAAP;AACD","sourcesContent":["import { types as t } from \"@marko/compiler\";\nimport withPreviousLocation from \"../../../util/with-previous-location\";\n\nexport function buildIfStatement(path, args) {\n  if (!args || !args.length) {\n    const name = path.get(\"name\");\n    throw name.buildCodeFrameError(\n      `Invalid '<${name.node.value}>' tag, expected arguments like '<${name.node.value}(test)>'.`\n    );\n  }\n\n  const ifStatement = t.ifStatement(\n    args.length === 1 ? args[0] : t.sequenceExpression(args),\n    t.blockStatement(path.node.body.body)\n  );\n\n  let nextPath = path.getNextSibling();\n\n  // Provide the if statement to the next part of the if chain.\n  if (nextPath.isMarkoTag()) {\n    const nextTagName = nextPath.get(\"name\");\n    if (\n      nextTagName.isStringLiteral({ value: \"else\" }) ||\n      nextTagName.isStringLiteral({ value: \"else-if\" })\n    ) {\n      nextPath.node.ifStatement = ifStatement;\n    }\n  }\n\n  return withPreviousLocation(ifStatement, path.node);\n}\n"],"file":"util.js"}