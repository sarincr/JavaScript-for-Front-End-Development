{"version":3,"sources":["../../../src/taglib/core/translate-while.js"],"names":["exit","path","arg","get","buildCodeFrameError","replaceWith","t","whileStatement","blockStatement","node","body"],"mappings":"gJAAA;AACA;;;;;AAKA;;AAEO,SAASA,IAAT,CAAcC,IAAd,EAAoB;AACzB,kCAAeA,IAAf;AACA,sCAAmBA,IAAnB;AACA,QAAMC,GAAG,GAAG,kCAAiBD,IAAjB,CAAZ;;AAEA,MAAI,CAACC,GAAL,EAAU;AACR,UAAMD,IAAI;AACPE,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG;AAGF,6DAHE,CAAN;;AAKD;;AAEDH,EAAAA,IAAI,CAACI,WAAL;AACE;AACEC,kBAAEC,cAAF;AACE,oCAAiBN,IAAjB,CADF;AAEEK,kBAAEE,cAAF,CAAiBP,IAAI,CAACQ,IAAL,CAAUC,IAAV,CAAeA,IAAhC,CAFF,CADF;;AAKET,EAAAA,IAAI,CAACQ,IALP,CADF;;;AASD","sourcesContent":["import { types as t } from \"@marko/compiler\";\nimport {\n  getArgOrSequence,\n  assertNoAttributes,\n  assertNoParams\n} from \"@marko/babel-utils\";\nimport withPreviousLocation from \"../../util/with-previous-location\";\n\nexport function exit(path) {\n  assertNoParams(path);\n  assertNoAttributes(path);\n  const arg = getArgOrSequence(path);\n\n  if (!arg) {\n    throw path\n      .get(\"name\")\n      .buildCodeFrameError(\n        \"A condition is required for the <while(condition)> tag.\"\n      );\n  }\n\n  path.replaceWith(\n    withPreviousLocation(\n      t.whileStatement(\n        getArgOrSequence(path),\n        t.blockStatement(path.node.body.body)\n      ),\n      path.node\n    )\n  );\n}\n"],"file":"translate-while.js"}