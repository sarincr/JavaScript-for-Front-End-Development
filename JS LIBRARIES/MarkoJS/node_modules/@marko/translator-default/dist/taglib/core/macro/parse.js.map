{"version":3,"sources":["../../../../src/taglib/core/macro/parse.js"],"names":["path","attributes","get","nameAttr","find","attr","node","buildCodeFrameError","length","nameAttrValue","isStringLiteral","name","value","file","hub","metadata","marko","macros","scope","generateUid"],"mappings":"kEAAe,kBAAUA,IAAV,EAAgB;AAC7B,QAAMC,UAAU,GAAGD,IAAI,CAACE,GAAL,CAAS,YAAT,CAAnB;AACA,QAAMC,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgB,CAAAC,IAAI,KAAIA,IAAI,CAACH,GAAL,CAAS,MAAT,EAAiBI,IAAjB,KAA0B,MAAlD,CAAjB;;AAEA,MAAI,CAACH,QAAL,EAAe;AACb,UAAMH,IAAI;AACPE,IAAAA,GADG,CACC,MADD;AAEHK,IAAAA,mBAFG,CAEiB,mDAFjB,CAAN;AAGD;;AAED,MAAIN,UAAU,CAACO,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAMP,UAAU,CAACA,UAAU,CAAC,CAAD,CAAV,KAAkBE,QAAlB,GAA6B,CAA7B,GAAiC,CAAlC,CAAV,CAA+CI,mBAA/C;AACJ,uDADI,CAAN;;AAGD;;AAED,QAAME,aAAa,GAAGN,QAAQ,CAACD,GAAT,CAAa,OAAb,CAAtB;;AAEA,MAAI,CAACO,aAAa,CAACC,eAAd,EAAL,EAAsC;AACpC,UAAMD,aAAa,CAACF,mBAAd;AACJ,qEADI,CAAN;;AAGD;;AAED,QAAMI,IAAI,GAAGF,aAAa,CAACH,IAAd,CAAmBM,KAAhC;AACA,QAAM,EAAEC,IAAF,KAAWb,IAAI,CAACc,GAAtB;;AAEA,MAAID,IAAI,CAACE,QAAL,CAAcC,KAAd,CAAoBC,MAApB,CAA2BN,IAA3B,CAAJ,EAAsC;AACpC,UAAMR,QAAQ,CAACI,mBAAT;AACH,8BAAyBI,IAAK,mBAD3B,CAAN;;AAGD;;AAEDE,EAAAA,IAAI,CAACE,QAAL,CAAcC,KAAd,CAAoBC,MAApB,CAA2BN,IAA3B,IAAmCE,IAAI,CAACK,KAAL,CAAWC,WAAX,CAAuBR,IAAvB,CAAnC;AACD","sourcesContent":["export default function (path) {\n  const attributes = path.get(\"attributes\");\n  const nameAttr = attributes.find(attr => attr.get(\"name\").node === \"name\");\n\n  if (!nameAttr) {\n    throw path\n      .get(\"name\")\n      .buildCodeFrameError('The \"name\" attribute is required on \"macro\" tags.');\n  }\n\n  if (attributes.length > 1) {\n    throw attributes[attributes[0] === nameAttr ? 1 : 0].buildCodeFrameError(\n      'The \"macro\" tag can only have a \"name\" attribute.'\n    );\n  }\n\n  const nameAttrValue = nameAttr.get(\"value\");\n\n  if (!nameAttrValue.isStringLiteral()) {\n    throw nameAttrValue.buildCodeFrameError(\n      'The \"name\" attribute for \"macro\" tags must be a string literal.'\n    );\n  }\n\n  const name = nameAttrValue.node.value;\n  const { file } = path.hub;\n\n  if (file.metadata.marko.macros[name]) {\n    throw nameAttr.buildCodeFrameError(\n      `A macro with the name \"${name}\" already exists.`\n    );\n  }\n\n  file.metadata.marko.macros[name] = file.scope.generateUid(name);\n}\n"],"file":"parse.js"}