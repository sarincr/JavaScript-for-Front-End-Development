{"version":3,"sources":["../src/class.js"],"names":["path","hub","file","node","body","classProperties","onCreateMethod","find","prop","computed","t","isIdentifier","key","name","objectProperties","map","isClassMethod","type","start","end","loc","isClassProperty","static","push","assignmentExpression","memberExpression","thisExpression","value","undefined","buildCodeFrameError","filter","Boolean","length","objectMethod","identifier","blockStatement","unshift","_inlineComponentClass","objectExpression","remove"],"mappings":"kEAAA;;AAEe,kBAAUA,IAAV,EAAgB;AAC7B,QAAM;AACJC,IAAAA,GAAG,EAAE,EAAEC,IAAF,EADD;AAEJC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,EAAEA,IAAF,EADF,EAFF;;AAKFJ,EAAAA,IALJ;;AAOA,QAAMK,eAAe,GAAG,EAAxB;AACA,MAAIC,cAAc,GAAGF,IAAI,CAACG,IAAL;AACnB,GAAAC,IAAI;AACFA,EAAAA,IAAI,CAACC,QAAL,KAAkB,KAAlB;AACAC,kBAAEC,YAAF,CAAeH,IAAI,CAACI,GAApB,CADA;AAEAJ,EAAAA,IAAI,CAACI,GAAL,CAASC,IAAT,KAAkB,UAJD,CAArB;;;AAOA,QAAMC,gBAAgB,GAAGV,IAAI;AAC1BW,EAAAA,GADsB,CAClB,CAAAP,IAAI,KAAI;AACX,QAAIE,gBAAEM,aAAF,CAAgBR,IAAhB,CAAJ,EAA2B;AACzBA,MAAAA,IAAI,CAACS,IAAL,GAAY,cAAZ;AACA,aAAOT,IAAI,CAACU,KAAZ;AACA,aAAOV,IAAI,CAACW,GAAZ;AACA,aAAOX,IAAI,CAACY,GAAZ;AACA,aAAOZ,IAAP;AACD,KAND,MAMO,IAAIE,gBAAEW,eAAF,CAAkBb,IAAlB,KAA2B,CAACA,IAAI,CAACc,MAArC,EAA6C;AAClDjB,MAAAA,eAAe,CAACkB,IAAhB;AACEb,sBAAEc,oBAAF;AACE,SADF;AAEEd,sBAAEe,gBAAF,CAAmBf,gBAAEgB,cAAF,EAAnB,EAAuClB,IAAI,CAACI,GAA5C,EAAiDJ,IAAI,CAACC,QAAtD,CAFF;AAGED,MAAAA,IAAI,CAACmB,KAHP,CADF;;;;AAQA,aAAOC,SAAP;AACD;;AAED,UAAM1B,IAAI,CAAC2B,mBAAL;AACJrB,IAAAA,IADI;AAEJ,8CAFI,CAAN;;AAID,GAxBsB;AAyBtBsB,EAAAA,MAzBsB,CAyBfC,OAzBe,CAAzB;;AA2BA,MAAI1B,eAAe,CAAC2B,MAApB,EAA4B;AAC1B,QAAI,CAAC1B,cAAL,EAAqB;AACnBQ,MAAAA,gBAAgB,CAACS,IAAjB;AACGjB,MAAAA,cAAc,GAAGI,gBAAEuB,YAAF;AAChB,cADgB;AAEhBvB,sBAAEwB,UAAF,CAAa,UAAb,CAFgB;AAGhB,QAHgB;AAIhBxB,sBAAEyB,cAAF,CAAiB,EAAjB,CAJgB,CADpB;;;AAQD;;AAED7B,IAAAA,cAAc,CAACF,IAAf,CAAoBA,IAApB,CAAyBgC,OAAzB,CAAiC,GAAG/B,eAApC;AACD;;AAEDH,EAAAA,IAAI,CAACmC,qBAAL,GAA6B3B,gBAAE4B,gBAAF,CAAmBxB,gBAAnB,CAA7B;AACAd,EAAAA,IAAI,CAACuC,MAAL;AACD","sourcesContent":["import { types as t } from \"@marko/compiler\";\n\nexport default function (path) {\n  const {\n    hub: { file },\n    node: {\n      body: { body }\n    }\n  } = path;\n\n  const classProperties = [];\n  let onCreateMethod = body.find(\n    prop =>\n      prop.computed === false &&\n      t.isIdentifier(prop.key) &&\n      prop.key.name === \"onCreate\"\n  );\n\n  const objectProperties = body\n    .map(prop => {\n      if (t.isClassMethod(prop)) {\n        prop.type = \"ObjectMethod\";\n        delete prop.start;\n        delete prop.end;\n        delete prop.loc;\n        return prop;\n      } else if (t.isClassProperty(prop) && !prop.static) {\n        classProperties.push(\n          t.assignmentExpression(\n            \"=\",\n            t.memberExpression(t.thisExpression(), prop.key, prop.computed),\n            prop.value\n          )\n        );\n\n        return undefined;\n      }\n\n      throw file.buildCodeFrameError(\n        prop,\n        \"Unsupported class property on component.\"\n      );\n    })\n    .filter(Boolean);\n\n  if (classProperties.length) {\n    if (!onCreateMethod) {\n      objectProperties.push(\n        (onCreateMethod = t.objectMethod(\n          \"method\",\n          t.identifier(\"onCreate\"),\n          [],\n          t.blockStatement([])\n        ))\n      );\n    }\n\n    onCreateMethod.body.body.unshift(...classProperties);\n  }\n\n  file._inlineComponentClass = t.objectExpression(objectProperties);\n  path.remove();\n}\n"],"file":"class.js"}