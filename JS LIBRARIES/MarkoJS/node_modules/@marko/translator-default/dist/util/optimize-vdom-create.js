"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.optimizeStaticVDOM = optimizeStaticVDOM;exports.analyzeStaticVDOM = analyzeStaticVDOM;var _he = require("he");
var _compiler = require("@marko/compiler");
var _babelUtils = require("@marko/babel-utils");





var _keyManager = require("./key-manager");
var _vdomOutWrite = _interopRequireDefault(require("./vdom-out-write"));
var _nativeTagVdom = require("../tag/native-tag[vdom]");
var _directives = _interopRequireDefault(require("../tag/attribute/directives"));

const staticNodes = new WeakSet();

const mergeStaticCreateVisitor = {
  MarkoText(path, state) {
    const { node } = path;
    state.currentRoot = _compiler.types.callExpression(
    _compiler.types.memberExpression(state.currentRoot, _compiler.types.identifier("t")),
    [_compiler.types.stringLiteral((0, _he.decode)(node.value))]);

  },
  MarkoPlaceholder(path, state) {
    const { value } = path.get("value").evaluate();
    state.currentRoot = _compiler.types.callExpression(
    _compiler.types.memberExpression(state.currentRoot, _compiler.types.identifier("t")),
    [_compiler.types.stringLiteral(value != null ? value.toString() : "")]);

  },
  MarkoTag(path, state) {
    if (path.node.attributes.find((a) => a.name === "key"))
    (0, _keyManager.getKeyManager)(path).resolveKey(path);
    const writeArgs = (0, _nativeTagVdom.tagArguments)(path, true);
    state.currentRoot = _compiler.types.callExpression(
    _compiler.types.memberExpression(state.currentRoot, _compiler.types.identifier("e")),
    writeArgs);

  } };


const analyzeStaticVisitor = {
  MarkoText(path) {
    staticNodes.add(path.node);
  },
  MarkoPlaceholder(path) {
    if (path.node.escape) {
      const { confident } = path.get("value").evaluate();
      if (confident) {
        staticNodes.add(path.node);
      }
    }
  },
  MarkoTag: {
    enter(path) {
      // needed to handle global keys on elements that don't have specific key attributes
      if ((0, _babelUtils.isLoopTag)(path)) path.skip();
    },
    exit(path) {
      // check name
      let isStatic =
      (0, _babelUtils.isNativeTag)(path) &&
      !path.node.body.params.length &&
      !path.node.arguments;

      const tagDef = (0, _babelUtils.getTagDef)(path);
      isStatic = isStatic && !tagDef.translator;

      // check attributes
      isStatic =
      isStatic &&
      path.get("attributes").every((attr) => {
        if (
        !_compiler.types.isMarkoAttribute(attr) ||
        attr.node.arguments ||
        attr.node.modifier ||
        _directives.default[attr.node.name])

        return false;

        const attrValue = attr.get("value");
        const exclude =
        _compiler.types.isObjectExpression(attrValue) ||
        _compiler.types.isArrayExpression(attrValue) ||
        _compiler.types.isRegExpLiteral(attrValue);
        if (exclude) return false;
        const { confident } = attrValue.evaluate();
        return confident;
      });

      // check children
      isStatic =
      isStatic &&
      path.
      get("body").
      get("body").
      every((t) => staticNodes.has(t.node));

      if (isStatic) staticNodes.add(path.node);
    } } };



function optimizeStaticVDOM(path) {
  const {
    hub: { file } } =
  path;

  if (
  !shouldRun(file.markoOpts) ||
  !staticNodes.has(path.node) ||
  staticNodes.has(path.parentPath.parentPath.node))
  {
    return;
  }

  const identifier = path.scope.generateUidIdentifier("marko_node");
  const writeArgs = (0, _nativeTagVdom.tagArguments)(path, true);
  const state = {
    currentRoot: _compiler.types.callExpression(
    (0, _babelUtils.importDefault)(
    file,
    "marko/src/runtime/vdom/helpers/v-element",
    "marko_createElement"),

    writeArgs) };



  path.traverse(mergeStaticCreateVisitor, state);

  const d = _compiler.types.variableDeclaration("const", [
  _compiler.types.variableDeclarator(identifier, state.currentRoot)]);

  file.path.node.body.push(d);
  path.replaceWith((0, _vdomOutWrite.default)("n", identifier, file._componentInstanceIdentifier));
  path.skip();
}

function analyzeStaticVDOM(path) {
  if (shouldRun(path.hub.file.markoOpts)) {
    path.traverse(analyzeStaticVisitor);
  }
}

function shouldRun(markoOpts) {
  return markoOpts.optimize && markoOpts.output !== "html";
}
//# sourceMappingURL=optimize-vdom-create.js.map