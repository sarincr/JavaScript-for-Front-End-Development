{"version":3,"sources":["../../src/placeholder/index[html].js"],"names":["ESCAPE_TYPES","html","name","module","alias","fn","escapeXML","script","escapeScript","style","escapeStyle","path","node","hub","file","confident","value","computed","get","evaluate","escape","tagName","findParentTagName","escapeType","t","stringLiteral","callExpression","replacement","replaceWith","remove","parentPath","isProgram","isMarkoTag","tagDef"],"mappings":"uJAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,GADF;AAEJC,IAAAA,MAAM,EAAE,2CAFJ;AAGJC,IAAAA,KAAK,EAAE,iBAHH;AAIJC,IAAAA,EAAE,EAAEC,YAJA,EADa;;AAOnBC,EAAAA,MAAM,EAAE;AACNJ,IAAAA,MAAM,EAAE,0DADF;AAENC,IAAAA,KAAK,EAAE,oBAFD;AAGNC,IAAAA,EAAE,EAAEG,gCAHE,EAPW;;AAYnBC,EAAAA,KAAK,EAAE;AACLN,IAAAA,MAAM,EAAE,yDADH;AAELC,IAAAA,KAAK,EAAE,mBAFF;AAGLC,IAAAA,EAAE,EAAEK,+BAHC,EAZY,EAArB;;;;AAmBe,kBAAUC,IAAV,EAAgB;AAC7B,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,GAAG,EAAE,EAAEC,IAAF,EAFD;AAGFH,EAAAA,IAHJ;AAIA,QAAM,EAAEI,SAAF,EAAaC,KAAK,EAAEC,QAApB,KAAiCN,IAAI,CAACO,GAAL,CAAS,OAAT,EAAkBC,QAAlB,EAAvC;AACA,MAAI,EAAEC,MAAF,EAAUJ,KAAV,KAAoBJ,IAAxB;;AAEA,MAAIQ,MAAJ,EAAY;AACV,UAAMC,OAAO,GAAGC,iBAAiB,CAACX,IAAD,CAAjC;AACA,UAAMY,UAAU,GAAGvB,YAAY,CAACqB,OAAD,CAAZ,IAAyBrB,YAAY,CAACC,IAAzD;;AAEAe,IAAAA,KAAK,GAAGD,SAAS;AACbS,oBAAEC,aAAF,CAAgBF,UAAU,CAAClB,EAAX,CAAcY,QAAd,CAAhB,CADa;AAEbO,oBAAEE,cAAF;AACEH,IAAAA,UAAU,CAACrB,IAAX;AACI;AACEY,IAAAA,IADF;AAEES,IAAAA,UAAU,CAACpB,MAFb;AAGEoB,IAAAA,UAAU,CAACrB,IAHb;AAIEqB,IAAAA,UAAU,CAACnB,KAJb,CADJ;;AAOI,mCAAcU,IAAd,EAAoBS,UAAU,CAACpB,MAA/B,EAAuCoB,UAAU,CAACnB,KAAlD,CARN;AASE,KAACY,KAAD,CATF,CAFJ;;AAaD,GAjBD,MAiBO;AACLA,IAAAA,KAAK,GAAGD,SAAS;AACbS,oBAAEC,aAAF,CAAgB,uBAASR,QAAT,CAAhB,CADa;AAEbO,oBAAEE,cAAF;AACE;AACEZ,IAAAA,IADF;AAEE,yCAFF;AAGE,qBAHF,CADF;;AAME,KAACE,KAAD,CANF,CAFJ;;AAUD;;AAED,QAAMW,WAAW,GAAG,0BAAM,GAAEX,KAAM,EAAlC;;AAEA,MAAIW,WAAJ,EAAiB;AACfhB,IAAAA,IAAI,CAACiB,WAAL,CAAiB,mCAAqBD,WAArB,EAAkCf,IAAlC,CAAjB;AACD,GAFD,MAEO;AACLD,IAAAA,IAAI,CAACkB,MAAL;AACD;AACF;;AAED,SAASP,iBAAT,CAA2BX,IAA3B,EAAiC;AAC/B,SAAQA,IAAI,GAAGA,IAAI,CAACmB,UAApB,EAAiC;AAC/B,QAAInB,IAAI,CAACoB,SAAL,EAAJ,EAAsB;AACpB;AACD;;AAED,QAAIpB,IAAI,CAACqB,UAAL,EAAJ,EAAuB;AACrB,YAAMC,MAAM,GAAG,2BAAUtB,IAAV,CAAf;AACA,aAAOsB,MAAM,IAAIA,MAAM,CAAChC,IAAjB,IAAyBU,IAAI,CAACO,GAAL,CAAS,YAAT,EAAuBN,IAAvD;AACD;AACF;AACF","sourcesContent":["import { types as t } from \"@marko/compiler\";\nimport { getTagDef, importNamed, importDefault } from \"@marko/babel-utils\";\nimport toString from \"marko/src/runtime/helpers/to-string\";\nimport { x as escapeXML } from \"marko/src/runtime/html/helpers/escape-xml\";\nimport escapeScript from \"marko/src/runtime/html/helpers/escape-script-placeholder\";\nimport escapeStyle from \"marko/src/runtime/html/helpers/escape-style-placeholder\";\nimport write from \"../util/html-out-write\";\nimport withPreviousLocation from \"../util/with-previous-location\";\n\nconst ESCAPE_TYPES = {\n  html: {\n    name: \"x\",\n    module: \"marko/src/runtime/html/helpers/escape-xml\",\n    alias: \"marko_escapeXml\",\n    fn: escapeXML\n  },\n  script: {\n    module: \"marko/src/runtime/html/helpers/escape-script-placeholder\",\n    alias: \"marko_escapeScript\",\n    fn: escapeScript\n  },\n  style: {\n    module: \"marko/src/runtime/html/helpers/escape-style-placeholder\",\n    alias: \"marko_escapeStyle\",\n    fn: escapeStyle\n  }\n};\n\nexport default function (path) {\n  const {\n    node,\n    hub: { file }\n  } = path;\n  const { confident, value: computed } = path.get(\"value\").evaluate();\n  let { escape, value } = node;\n\n  if (escape) {\n    const tagName = findParentTagName(path);\n    const escapeType = ESCAPE_TYPES[tagName] || ESCAPE_TYPES.html;\n\n    value = confident\n      ? t.stringLiteral(escapeType.fn(computed))\n      : t.callExpression(\n          escapeType.name\n            ? importNamed(\n                file,\n                escapeType.module,\n                escapeType.name,\n                escapeType.alias\n              )\n            : importDefault(file, escapeType.module, escapeType.alias),\n          [value]\n        );\n  } else {\n    value = confident\n      ? t.stringLiteral(toString(computed))\n      : t.callExpression(\n          importDefault(\n            file,\n            \"marko/src/runtime/helpers/to-string\",\n            \"marko_to_string\"\n          ),\n          [value]\n        );\n  }\n\n  const replacement = write`${value}`;\n\n  if (replacement) {\n    path.replaceWith(withPreviousLocation(replacement, node));\n  } else {\n    path.remove();\n  }\n}\n\nfunction findParentTagName(path) {\n  while ((path = path.parentPath)) {\n    if (path.isProgram()) {\n      return;\n    }\n\n    if (path.isMarkoTag()) {\n      const tagDef = getTagDef(path);\n      return tagDef && tagDef.html && path.get(\"name.value\").node;\n    }\n  }\n}\n"],"file":"index[html].js"}