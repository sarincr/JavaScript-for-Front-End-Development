"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.default = _default;var _compiler = require("@marko/compiler");
var _babelUtils = require("@marko/babel-utils");
var _attr = _interopRequireDefault(require("marko/src/runtime/html/helpers/attr"));
var _util = require("../util");

function _default(path, attrs) {
  if (!attrs.length) {
    return _compiler.types.stringLiteral("");
  }

  const quasis = [];
  const expressions = [];
  let curString = "";

  let attrsObject = _compiler.types.objectExpression([]);
  let hasSpread = false;

  for (let i = 0; i < attrs.length; i++) {
    const attr = attrs[i];
    const {
      hub: { file },
      node: { name, value } } =
    attr;

    if (!name) {
      quasis.push(curString);
      curString = "";
      hasSpread = hasSpread || attr.type === "MarkoSpreadAttribute";
      attrsObject.properties.push(_compiler.types.spreadElement(value));
      continue;
    }

    const { confident, computed } = (0, _util.evaluateAttr)(attr);

    if (confident) {
      if (computed == null || computed === false) {
        continue;
      }

      const attrString = (0, _attr.default)(name, computed);
      curString += attrString;

      if (attrString) {
        attrsObject.properties.push(
        _compiler.types.objectProperty(_compiler.types.stringLiteral(name), value));

      }
    } else {
      const args = [_compiler.types.stringLiteral(name), value];
      quasis.push(curString);
      curString = "";

      attrsObject.properties.push(
      _compiler.types.objectProperty(_compiler.types.stringLiteral(name), value));


      expressions.push(
      _compiler.types.callExpression(
      (0, _babelUtils.importDefault)(
      file,
      "marko/src/runtime/html/helpers/attr",
      "marko_attr"),

      args));


    }
  }
  quasis.push(curString);
  if (hasSpread) {
    return _compiler.types.callExpression(
    (0, _babelUtils.importDefault)(
    path.hub.file,
    "marko/src/runtime/html/helpers/attrs",
    "marko_attrs"),

    [
    attrsObject.properties.length === 1 ?
    attrsObject.properties[0].argument :
    attrsObject]);


  } else if (expressions.length) {
    return (0, _babelUtils.normalizeTemplateString)(quasis, ...expressions);
  } else {
    return _compiler.types.stringLiteral(quasis.join(""));
  }
}
//# sourceMappingURL=attributes.js.map