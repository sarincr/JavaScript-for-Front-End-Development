"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const DevServer = require("webpack-dev-server");

const SpawnServerPlugin = require("spawn-server-webpack-plugin");

const {
  loadWebpackConfig
} = require("@marko/build");

const webpack = require("webpack");

module.exports = ({
  entry,
  port = 3000,
  verbose,
  nodeArgs = []
}) => {
  const spawnedServer = new SpawnServerPlugin({
    args: nodeArgs.concat("--enable-source-maps"),
    mainEntry: "index"
  });
  const configs = loadWebpackConfig({
    entry,
    production: false
  });
  const serverConfig = configs.find(({
    target
  }) => target === "node" || target === "async-node");

  if (serverConfig) {
    serverConfig.plugins = (serverConfig.plugins || []).concat(spawnedServer);
  }

  const compiler = webpack(configs);

  const devServerConfig = _objectSpread({
    noInfo: true,
    overlay: true,
    host: "0.0.0.0",
    contentBase: false,
    injectClient: ({
      target = "web"
    }) => target === "web" || target.startsWith("browserslist"),
    stats: verbose ? {
      all: true
    } : {
      all: false,
      colors: true,
      errors: true,
      warnings: true
    },
    disableHostCheck: true,
    clientLogLevel: "error",
    headers: {
      "Access-Control-Allow-Origin": "*"
    }
  }, spawnedServer.devServerConfig);

  const server = new DevServer(compiler, devServerConfig);
  return new Promise((resolve, reject) => server.listen(port, devServerConfig.host, (_, err) => err ? reject(err) : resolve(server)));
};