"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.resolveRelativePath = resolveRelativePath;exports.importDefault = importDefault;exports.importNamed = importNamed;var _path = _interopRequireDefault(require("path"));
var _compiler = require("@marko/compiler");

const IS_POSIX = _path.default.sep === "/";
const IMPORTS_KEY = Symbol();
const FS_START = IS_POSIX ? _path.default.sep : /^(.*?:)/.exec(process.cwd())[1];

const toPosix = IS_POSIX ?
(v) => v :
(v) => {
  let result = "";
  for (let i = v.length; i--;) {
    const c = v[i];
    result = (c === _path.default.sep ? "/" : c) + result;
  }

  return result;
};

function resolveRelativePath(file, request) {
  if (!request.startsWith(FS_START)) {
    return remapProductionMarkoBuild(file, request);
  }

  const { filename } = file.opts;
  let relativePath = toPosix(_path.default.relative(_path.default.dirname(filename), request));
  if (relativePath[0] !== ".") relativePath = `./${relativePath}`;
  return remapProductionMarkoBuild(
  file,
  relativePath.replace(/^(?:\.{1,2}\/)+node_modules\//, ""));

}

function importDefault(file, request, nameHint) {
  const imports = getImports(file);
  request = resolveRelativePath(file, request);
  let importDeclaration = imports.get(request);

  if (!importDeclaration) {
    imports.set(
    request,
    importDeclaration = file.path.pushContainer(
    "body",
    _compiler.types.importDeclaration([], _compiler.types.stringLiteral(request)))[
    0]);

  }

  if (!nameHint) {
    return;
  }

  const specifiers = importDeclaration.get("specifiers");
  const specifier = specifiers.find((specifier) =>
  specifier.isImportDefaultSpecifier());


  if (!specifier) {
    const identifier = file.scope.generateUidIdentifier(nameHint);
    importDeclaration.pushContainer(
    "specifiers",
    _compiler.types.importDefaultSpecifier(identifier));

    return identifier;
  }

  return _compiler.types.identifier(specifier.node.local.name);
}

function importNamed(file, request, name, nameHint = name) {
  request = resolveRelativePath(file, request);
  const imports = getImports(file);
  let importDeclaration = imports.get(request);

  if (!importDeclaration) {
    imports.set(
    request,
    importDeclaration = file.path.pushContainer(
    "body",
    _compiler.types.importDeclaration([], _compiler.types.stringLiteral(request)))[
    0]);

  }

  const specifiers = importDeclaration.get("specifiers");
  const specifier = specifiers.find(
  (specifier) =>
  specifier.isImportSpecifier() && specifier.node.imported.name === name);


  if (!specifier) {
    const identifier = file.scope.generateUidIdentifier(nameHint);
    importDeclaration.pushContainer(
    "specifiers",
    _compiler.types.importSpecifier(identifier, _compiler.types.identifier(name)));

    return identifier;
  }

  return _compiler.types.identifier(specifier.node.local.name);
}

function getImports(file) {
  let imports = file.metadata.marko[IMPORTS_KEY];

  if (!imports) {
    imports = file.metadata.marko[IMPORTS_KEY] = new Map();
  }

  return imports;
}

function remapProductionMarkoBuild(file, request) {
  if (!file.markoOpts.optimize) return request;
  return request.replace(/(^|\/)marko\/src\//, "$1marko/dist/");
}
//# sourceMappingURL=imports.js.map