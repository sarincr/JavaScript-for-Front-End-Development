"use strict";exports.__esModule = true;exports.parseScript = parseScript;exports.parseExpression = parseExpression;var babelParser = _interopRequireWildcard(require("@babel/parser"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function (nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

const CODE_AS_WHITE_SPACE_KEY = Symbol();

function parseScript(file, str, start) {
  return tryParse(file, false, str, start);
}

function parseExpression(file, str, start) {
  return tryParse(file, true, str, start);
}

function tryParse(file, isExpression, str, start) {
  if (start) {
    let whitespace = file.metadata.marko[CODE_AS_WHITE_SPACE_KEY];

    if (whitespace === undefined) {
      file.metadata.marko[CODE_AS_WHITE_SPACE_KEY] = whitespace =
      file.code.replace(/[^\s]/g, " ");
    }

    str = whitespace.slice(0, start) + str;
  }

  try {
    return isExpression ?
    babelParser.parseExpression(str, file.opts.parserOpts) :
    babelParser.parse(str, file.opts.parserOpts).program;
  } catch (err) {
    let { loc, message } = err;
    if (loc) {
      throw file.buildCodeFrameError(
      { loc: { start: loc } },
      message.replace(/ *\(\d+:\d+\)$/, ""));

    } else {
      throw err;
    }
  }
}
//# sourceMappingURL=parse.js.map