{"version":3,"sources":["../src/assert.js"],"names":["assertAllowedAttributes","path","allowed","node","attributes","forEach","attr","i","includes","name","get","buildCodeFrameError","value","assertNoAttributes","assertNoParams","params","body","length","start","loc","end","hub","buildError","assertNoAttributeTags","exampleAttributeTag","assertNoArgs","args","assertNoVar","tagVar"],"mappings":"qTAAO,SAASA,uBAAT,CAAiCC,IAAjC,EAAuCC,OAAvC,EAAgD;AACrD,QAAM,EAAEC,IAAF,KAAWF,IAAjB;AACAE,EAAAA,IAAI,CAACC,UAAL,CAAgBC,OAAhB,CAAwB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACnC,QAAI,CAACL,OAAO,CAACM,QAAR,CAAiBF,IAAI,CAACG,IAAtB,CAAL,EAAkC;AAChC,YAAMR,IAAI;AACPS,MAAAA,GADG,CACE,cAAaH,CAAE,EADjB;AAEHI,MAAAA,mBAFG;AAGD,kBAAWR,IAAI,CAACM,IAAL,CAAUG,KAAM,qBAAoBN,IAAI,CAACG,IAAK,IAHxD,CAAN;;AAKD;AACF,GARD;AASD;;AAEM,SAASI,kBAAT,CAA4BZ,IAA5B,EAAkC;AACvCD,EAAAA,uBAAuB,CAACC,IAAD,EAAO,EAAP,CAAvB;AACD;;AAEM,SAASa,cAAT,CAAwBb,IAAxB,EAA8B;AACnC,QAAM,EAAEc,MAAF,KAAad,IAAI,CAACE,IAAL,CAAUa,IAA7B;AACA,MAAID,MAAM,CAACE,MAAX,EAAmB;AACjB,UAAMC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAUI,GAAV,CAAcD,KAA5B;AACA,UAAME,GAAG,GAAGL,MAAM,CAACA,MAAM,CAACE,MAAP,GAAgB,CAAjB,CAAN,CAA0BE,GAA1B,CAA8BC,GAA1C;AACA,UAAMnB,IAAI,CAACoB,GAAL,CAASC,UAAT;AACJ,MAAEH,GAAG,EAAE,EAAED,KAAF,EAASE,GAAT,EAAP,EADI;AAEJ,sCAFI,CAAN;;AAID;AACF;;AAEM,SAASG,qBAAT,CAA+BtB,IAA/B,EAAqC;AAC1C,QAAMuB,mBAAmB,GAAGvB,IAAI,CAACS,GAAL,CAAS,qBAAT,CAA5B;AACA,MAAIc,mBAAmB,CAACrB,IAAxB,EAA8B;AAC5B,UAAMqB,mBAAmB;AACtBd,IAAAA,GADG,CACC,MADD;AAEHC,IAAAA,mBAFG,CAEiB,wCAFjB,CAAN;AAGD;AACF;;AAEM,SAASc,YAAT,CAAsBxB,IAAtB,EAA4B;AACjC,QAAM,EAAEoB,GAAF,KAAUpB,IAAhB;AACA,QAAMyB,IAAI,GAAGzB,IAAI,CAACS,GAAL,CAAS,WAAT,CAAb;AACA,MAAIgB,IAAI,CAACT,MAAT,EAAiB;AACf,UAAMC,KAAK,GAAGQ,IAAI,CAAC,CAAD,CAAJ,CAAQvB,IAAR,CAAagB,GAAb,CAAiBD,KAA/B;AACA,UAAME,GAAG,GAAGM,IAAI,CAACA,IAAI,CAACT,MAAL,GAAc,CAAf,CAAJ,CAAsBd,IAAtB,CAA2BgB,GAA3B,CAA+BC,GAA3C;AACA,UAAMC,GAAG,CAACC,UAAJ;AACJ,MAAEH,GAAG,EAAE,EAAED,KAAF,EAASE,GAAT,EAAP,EADI;AAEJ,qCAFI,CAAN;;AAID;AACF;;AAEM,SAASO,WAAT,CAAqB1B,IAArB,EAA2B;AAChC,QAAM2B,MAAM,GAAG3B,IAAI,CAACS,GAAL,CAAS,KAAT,CAAf;AACA,MAAIkB,MAAM,CAACzB,IAAX,EAAiB;AACf,UAAMyB,MAAM,CAACjB,mBAAP,CAA2B,kCAA3B,CAAN;AACD;AACF","sourcesContent":["export function assertAllowedAttributes(path, allowed) {\n  const { node } = path;\n  node.attributes.forEach((attr, i) => {\n    if (!allowed.includes(attr.name)) {\n      throw path\n        .get(`attributes.${i}`)\n        .buildCodeFrameError(\n          `Invalid \"${node.name.value}\" tag attribute: \"${attr.name}\".`\n        );\n    }\n  });\n}\n\nexport function assertNoAttributes(path) {\n  assertAllowedAttributes(path, []);\n}\n\nexport function assertNoParams(path) {\n  const { params } = path.node.body;\n  if (params.length) {\n    const start = params[0].loc.start;\n    const end = params[params.length - 1].loc.end;\n    throw path.hub.buildError(\n      { loc: { start, end } },\n      \"Tag does not support parameters.\"\n    );\n  }\n}\n\nexport function assertNoAttributeTags(path) {\n  const exampleAttributeTag = path.get(\"exampleAttributeTag\");\n  if (exampleAttributeTag.node) {\n    throw exampleAttributeTag\n      .get(\"name\")\n      .buildCodeFrameError(\"@tags must be within a custom element.\");\n  }\n}\n\nexport function assertNoArgs(path) {\n  const { hub } = path;\n  const args = path.get(\"arguments\");\n  if (args.length) {\n    const start = args[0].node.loc.start;\n    const end = args[args.length - 1].node.loc.end;\n    throw hub.buildError(\n      { loc: { start, end } },\n      \"Tag does not support arguments.\"\n    );\n  }\n}\n\nexport function assertNoVar(path) {\n  const tagVar = path.get(\"var\");\n  if (tagVar.node) {\n    throw tagVar.buildCodeFrameError(\"Tag does not support a variable.\");\n  }\n}\n"],"file":"assert.js"}