{"version":3,"sources":["../src/template-string.js"],"names":["normalizeTemplateString","quasis","expressions","map","q","t","isTemplateElement","value","cooked","i","length","v","isTemplateLiteral","splice","slice","isStringLiteral","literal","join","undefined","stringLiteral","every","isEmptyString","templateLiteral","getTemplateElement","s","templateElement","raw","quotes"],"mappings":"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","sourcesContent":["import jsesc from \"jsesc\";\nimport { types as t } from \"@marko/compiler\";\n\nexport function normalizeTemplateString(quasis, ...expressions) {\n  quasis = quasis.map(q => (t.isTemplateElement(q) ? q.value.cooked : q));\n\n  for (let i = expressions.length; i--; ) {\n    let v = expressions[i];\n    if (t.isTemplateLiteral(v)) {\n      quasis[i] += v.quasis[0].value.cooked;\n      quasis[i + 1] =\n        v.quasis[v.quasis.length - 1].value.cooked + (quasis[i + 1] || \"\");\n      quasis.splice(\n        i + 1,\n        0,\n        ...v.quasis.slice(1, -1).map(q => q.value.cooked)\n      );\n      expressions.splice(i, 1, ...v.expressions);\n      i += v.expressions.length;\n    } else if (t.isStringLiteral(v) || typeof v === \"string\") {\n      const value = t.isStringLiteral(v) ? v.value : v;\n      quasis[i] += value + quasis[i + 1];\n      expressions.splice(i, 1);\n      quasis.splice(i + 1, 1);\n    }\n  }\n\n  if (!expressions.length) {\n    // No expression, just return a literal or empty.\n    const literal = quasis.join(\"\");\n    return literal === \"\" ? undefined : t.stringLiteral(literal);\n  }\n\n  if (\n    expressions.length === 1 &&\n    quasis.length === 2 &&\n    quasis.every(isEmptyString)\n  ) {\n    // Only expression `${expr}` just return the expr.\n    return expressions[0];\n  }\n\n  // Do it.\n  return t.templateLiteral(quasis.map(getTemplateElement), expressions);\n}\n\nfunction getTemplateElement(s = \"\") {\n  return t.templateElement({\n    cooked: s,\n    raw: jsesc(s, { quotes: \"backtick\" })\n  });\n}\n\nfunction isEmptyString(s = \"\") {\n  return s === \"\";\n}\n"],"file":"template-string.js"}