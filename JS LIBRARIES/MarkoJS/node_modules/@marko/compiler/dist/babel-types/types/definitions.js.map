{"version":3,"sources":["../../../src/babel-types/types/definitions.js"],"names":["valueFieldCommon","value","validate","MarkoDefinitions","MarkoDocumentType","aliases","builder","fields","MarkoDeclaration","MarkoCDATA","MarkoComment","MarkoText","MarkoPlaceholder","visitor","escape","default","MarkoScriptlet","body","static","MarkoClass","MarkoAttribute","name","modifier","optional","arguments","bound","MarkoSpreadAttribute","MarkoTagBody","params","functionCommon","MarkoTag","attributes","rawValue","var","MARKO_TYPES","Object","keys","MARKO_ALIAS_TYPES","Array","from","Set","reduce","all","t","concat"],"mappings":"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","sourcesContent":["import {\n  assertNodeType,\n  assertValueType,\n  arrayOfType,\n  chain,\n  assertEach\n} from \"@babel/types/lib/definitions/utils\";\n\nimport { functionCommon } from \"@babel/types/lib/definitions/core\";\nconst valueFieldCommon = {\n  value: {\n    validate: assertValueType(\"string\")\n  }\n};\n\nconst MarkoDefinitions = {\n  MarkoDocumentType: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\"],\n    fields: { ...valueFieldCommon }\n  },\n\n  MarkoDeclaration: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\"],\n    fields: { ...valueFieldCommon }\n  },\n\n  MarkoCDATA: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\"],\n    fields: { ...valueFieldCommon }\n  },\n\n  MarkoComment: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\"],\n    fields: { ...valueFieldCommon }\n  },\n\n  MarkoText: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\"],\n    fields: { ...valueFieldCommon }\n  },\n\n  MarkoPlaceholder: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"value\", \"escape\"],\n    visitor: [\"value\"],\n    fields: {\n      value: {\n        validate: assertNodeType(\"Expression\")\n      },\n      escape: {\n        validate: assertValueType(\"boolean\"),\n        default: true\n      }\n    }\n  },\n\n  MarkoScriptlet: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"body\", \"static\"],\n    visitor: [\"body\"],\n    fields: {\n      body: {\n        validate: arrayOfType([\"Statement\"])\n      },\n      static: {\n        validate: assertValueType(\"boolean\"),\n        default: false\n      }\n    }\n  },\n\n  MarkoClass: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"body\"],\n    visitor: [\"body\"],\n    fields: {\n      body: {\n        validate: assertNodeType(\"ClassBody\")\n      }\n    }\n  },\n\n  MarkoAttribute: {\n    aliases: [\"Marko\"],\n    builder: [\"name\", \"value\", \"modifier\", \"arguments\", \"default\", \"bound\"],\n    visitor: [\"value\", \"arguments\"],\n    fields: {\n      name: {\n        validate: assertValueType(\"string\")\n      },\n      value: {\n        validate: assertNodeType(\"Expression\")\n      },\n      modifier: {\n        validate: assertValueType(\"string\"),\n        optional: true\n      },\n      arguments: {\n        validate: chain(\n          assertValueType(\"array\"),\n          assertEach(assertNodeType(\"Expression\", \"SpreadElement\"))\n        ),\n        optional: true\n      },\n      default: {\n        validate: assertValueType(\"boolean\"),\n        optional: true\n      },\n      bound: {\n        validate: assertValueType(\"boolean\"),\n        optional: true\n      }\n    }\n  },\n\n  MarkoSpreadAttribute: {\n    aliases: [\"Marko\"],\n    builder: [\"value\"],\n    visitor: [\"value\"],\n    fields: {\n      value: {\n        validate: assertNodeType(\"Expression\")\n      }\n    }\n  },\n\n  MarkoTagBody: {\n    aliases: [\"Marko\", \"BlockParent\", \"Scope\"],\n    builder: [\"body\", \"params\"],\n    visitor: [\"params\", \"body\"],\n    fields: {\n      params: {\n        ...functionCommon.params,\n        default: []\n      },\n      body: {\n        validate: arrayOfType([\n          \"MarkoTag\",\n          \"MarkoCDATA\",\n          \"MarkoText\",\n          \"MarkoPlaceholder\",\n          \"MarkoScriptlet\",\n          \"MarkoComment\"\n        ]),\n        default: []\n      }\n    }\n  },\n\n  MarkoTag: {\n    aliases: [\"Marko\", \"Statement\"],\n    builder: [\"name\", \"attributes\", \"body\", \"arguments\", \"var\"],\n    visitor: [\"name\", \"attributes\", \"body\", \"arguments\", \"var\"],\n    fields: {\n      name: {\n        validate: assertNodeType(\"Expression\")\n      },\n      attributes: {\n        validate: arrayOfType([\"MarkoAttribute\", \"MarkoSpreadAttribute\"]),\n        default: []\n      },\n      body: {\n        validate: assertNodeType(\"MarkoTagBody\")\n      },\n      arguments: {\n        validate: chain(\n          assertValueType(\"array\"),\n          assertEach(assertNodeType(\"Expression\", \"SpreadElement\"))\n        ),\n        optional: true\n      },\n      rawValue: {\n        validate: assertValueType(\"string\"),\n        optional: true\n      },\n      var: {\n        validate: assertNodeType(\"LVal\"),\n        optional: true\n      }\n    }\n  }\n};\n\nexport default MarkoDefinitions;\nexport const MARKO_TYPES = Object.keys(MarkoDefinitions);\nexport const MARKO_ALIAS_TYPES = Array.from(\n  new Set(\n    MARKO_TYPES.reduce((all, t) => all.concat(MarkoDefinitions[t].aliases), [])\n  )\n);\n"],"file":"definitions.js"}