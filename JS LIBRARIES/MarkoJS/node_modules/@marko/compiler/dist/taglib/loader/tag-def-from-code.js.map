{"version":3,"sources":["../../../src/taglib/loader/tag-def-from-code.js"],"names":["tagStartRegExp","tokensRegExp","extractTagDef","code","startMatches","exec","tagDefStart","tagDefEnd","index","length","nextTokenMatches","lastIndex","depth","jsTagDef","substring","tagDefObject","JSON","parse","e","eval","exports"],"mappings":"cAAA;AACA;AACA,IAAIA,cAAc,GAAG,qDAArB;;AAEA;AACA,IAAIC,YAAY;AACd,yFADF;;AAGA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,YAAY,GAAGJ,cAAc,CAACK,IAAf,CAAoBF,IAApB,CAAnB;;AAEA,MAAIG,WAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAIH,YAAJ,EAAkB;AAChBE,IAAAA,WAAW,GAAGF,YAAY,CAACI,KAAb,GAAqBJ,YAAY,CAAC,CAAD,CAAZ,CAAgBK,MAAnD;AACA,QAAIC,gBAAJ;AACAT,IAAAA,YAAY,CAACU,SAAb,GAAyBL,WAAzB;AACA,QAAIM,KAAK,GAAG,CAAZ;;AAEA,WAAQF,gBAAgB,GAAGT,YAAY,CAACI,IAAb,CAAkBF,IAAlB,CAA3B,EAAqD;AACnD,UAAIO,gBAAgB,CAAC,CAAD,CAAhB,KAAwB,GAA5B,EAAiC;AAC/BE,QAAAA,KAAK;AACL;AACD,OAHD,MAGO,IAAIF,gBAAgB,CAAC,CAAD,CAAhB,KAAwB,GAA5B,EAAiC;AACtC,YAAI,EAAEE,KAAF,KAAY,CAAhB,EAAmB;AACjBL,UAAAA,SAAS,GAAGN,YAAY,CAACU,SAAzB;AACA;AACD;AACF,OALM,MAKA,IAAID,gBAAgB,CAAC,CAAD,CAAhB,KAAwB,GAA5B,EAAiC;AACtCH,QAAAA,SAAS,GAAGG,gBAAgB,CAACF,KAA7B;AACA;AACD;AACF;;AAED,QAAIF,WAAW,IAAI,IAAf,IAAuBC,SAAS,IAAI,IAAxC,EAA8C;AAC5C,UAAIM,QAAQ,GAAGV,IAAI,CAACW,SAAL,CAAeR,WAAf,EAA4BC,SAA5B,CAAf;AACA,UAAIQ,YAAJ;;AAEA,UAAI;AACF;AACAA,QAAAA,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAf;AACD,OAHD,CAGE,OAAOK,CAAP,EAAU;AACV;AACA,YAAI;AACFH,UAAAA,YAAY,GAAGI,IAAI,CAAC,MAAMN,QAAN,GAAiB,GAAlB,CAAnB;AACD,SAFD,CAEE,OAAOK,CAAP,EAAU;AACVH,UAAAA,YAAY,GAAG,EAAf;AACD;AACF;AACD,aAAOA,YAAP;AACD;AACF,GAtCD,MAsCO;AACL,WAAO,IAAP;AACD;AACF;;AAEDK,OAAO,CAAClB,aAAR,GAAwBA,aAAxB","sourcesContent":["// Rather than using a full-blown JavaScript parser, we are going to use a few regular expressions\n// to tokenize the code and find what we are interested in\nvar tagStartRegExp = /(^\\s*(?:(?:exports.(?:tag|TAG))|(?:TAG))\\s*=\\s*)\\{/m;\n\n// Tokens: \"<string>\", '<string>', /*<some comment*/, //<single line comment>, {, }, ;\nvar tokensRegExp =\n  /\"(?:[^\"]|\\\\\")*\"|'(?:[^'])|(\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+\\/)|(\\/\\/.*)|[{};]/g;\n\nfunction extractTagDef(code) {\n  var startMatches = tagStartRegExp.exec(code);\n\n  var tagDefStart;\n  var tagDefEnd;\n\n  if (startMatches) {\n    tagDefStart = startMatches.index + startMatches[1].length;\n    var nextTokenMatches;\n    tokensRegExp.lastIndex = tagDefStart;\n    var depth = 0;\n\n    while ((nextTokenMatches = tokensRegExp.exec(code))) {\n      if (nextTokenMatches[0] === \"{\") {\n        depth++;\n        continue;\n      } else if (nextTokenMatches[0] === \"}\") {\n        if (--depth === 0) {\n          tagDefEnd = tokensRegExp.lastIndex;\n          break;\n        }\n      } else if (nextTokenMatches[0] === \";\") {\n        tagDefEnd = nextTokenMatches.index;\n        break;\n      }\n    }\n\n    if (tagDefStart != null && tagDefEnd != null) {\n      var jsTagDef = code.substring(tagDefStart, tagDefEnd);\n      var tagDefObject;\n\n      try {\n        // Try parsing it as JSON\n        tagDefObject = JSON.parse(jsTagDef);\n      } catch (e) {\n        // Try parsing it as JavaScript\n        try {\n          tagDefObject = eval(\"(\" + jsTagDef + \")\");\n        } catch (e) {\n          tagDefObject = {};\n        }\n      }\n      return tagDefObject;\n    }\n  } else {\n    return null;\n  }\n}\n\nexports.extractTagDef = extractTagDef;\n"],"file":"tag-def-from-code.js"}