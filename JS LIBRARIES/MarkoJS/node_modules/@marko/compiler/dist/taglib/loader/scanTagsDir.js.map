{"version":3,"sources":["../../../src/taglib/loader/scanTagsDir.js"],"names":["nodePath","require","taglibFS","jsonFileReader","tagDefFromCode","loaders","fsReadOptions","encoding","extend","types","tagFileTypes","searchFiles","name","type","createDefaultTagDef","attributes","targetProperty","preserveName","getFileMap","dirname","fileMap","files","curFS","readdirSync","forEach","file","extName","extname","baseName","slice","length","fullPath","join","__path","getPath","filename","js","key","findAndSetFile","tagDef","tagDirname","statSync","isDirectory","_","tagName","basename","i","repeatedName","replace","path","hasFile","module","exports","scanTagsDir","tagsConfigPath","tagsConfigDirname","dir","taglib","dependencyChain","prefix","resolve","children","len","childFilename","tagJsonPath","ext","template","hasTagJson","readFileSync","fileWasSet","Error","JSON","stringify","renderer","templateCode","String","extractedTagDef","extractTagDef","tagDependencyChain","append","tag","Tag","loadTagFromProps","addTag"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst nodePath = require(\"path\");\nconst taglibFS = require(\"../fs\");\nconst jsonFileReader = require(\"./json-file-reader\");\nconst tagDefFromCode = require(\"./tag-def-from-code\");\nconst loaders = require(\"./loaders\");\nconst fsReadOptions = { encoding: \"utf8\" };\nconst extend = require(\"raptor-util/extend\");\nconst types = require(\"./types\");\n\nconst tagFileTypes = [\n  \"template\",\n  \"renderer\",\n  \"transform\",\n  \"transformer\",\n  \"code-generator\",\n  \"translate\",\n  \"node-factory\",\n  \"parse\"\n];\n\nconst searchFiles = [\n  { name: \"index.marko\", type: \"template\" },\n  { name: \"renderer\", type: \"renderer\" },\n  { name: \"index\", type: \"renderer\" },\n  { name: \"template.marko\", type: \"template\" },\n  { name: \"template.html\", type: \"template\" },\n  { name: \"code-generator\", type: \"translate\" },\n  { name: \"translate\", type: \"translate\" },\n  { name: \"node-factory\", type: \"parse\" },\n  { name: \"parse\", type: \"parse\" },\n  { name: \"transformer\", type: \"transform\" },\n  { name: \"transform\", type: \"transform\" }\n];\n\nfunction createDefaultTagDef() {\n  return {\n    attributes: {\n      \"*\": {\n        type: \"string\",\n        targetProperty: null,\n        preserveName: false\n      }\n    }\n  };\n}\n\nfunction getFileMap(dirname) {\n  let fileMap = {};\n  let files = taglibFS.curFS.readdirSync(dirname);\n\n  files.forEach(file => {\n    let extName = nodePath.extname(file);\n    let baseName = file.slice(0, -1 * extName.length);\n    let fullPath = nodePath.join(dirname, file);\n    fileMap[baseName] = fileMap[baseName] || {};\n    fileMap[baseName][extName] = fullPath;\n    fileMap[file] = fileMap[file] || {};\n    fileMap[file].__path = fullPath;\n  });\n\n  return fileMap;\n}\n\nfunction getPath(filename, fileMap) {\n  let file = fileMap[filename];\n\n  if (!file) return;\n  if (file.__path) return file.__path;\n  if (file.js) return file[\".js\"];\n\n  for (let key in file) {\n    return file[key];\n  }\n}\n\nfunction findAndSetFile(tagDef, tagDirname) {\n  try {\n    if (!taglibFS.curFS.statSync(tagDirname).isDirectory()) {\n      return;\n    }\n  } catch (_) {\n    return;\n  }\n\n  let tagName = nodePath.basename(tagDirname);\n  let fileMap = getFileMap(tagDirname);\n\n  for (let i = 0; i < searchFiles.length; i++) {\n    let name = searchFiles[i].name;\n    let type = searchFiles[i].type;\n    let repeatedName = tagName + \".\" + name.replace(\"index.\", \"\");\n    let path = getPath(name, fileMap) || getPath(repeatedName, fileMap);\n\n    if (path) {\n      tagDef[type] = path;\n      return true;\n    }\n  }\n}\n\nfunction hasFile(tagDef) {\n  for (let i = 0; i < tagFileTypes.length; i++) {\n    if (tagDef[tagFileTypes[i]]) return true;\n  }\n  return false;\n}\n\n/**\n * @param {String} tagsConfigPath path to tag definition file\n * @param {String} tagsConfigDirname path to directory of tags config file (should be path.dirname(tagsConfigPath))\n * @param {String|Object} dir the path to directory to scan\n * @param {String} taglib the taglib that is being loaded\n */\nmodule.exports = function scanTagsDir(\n  tagsConfigPath,\n  tagsConfigDirname,\n  dir,\n  taglib,\n  dependencyChain\n) {\n  let prefix;\n\n  if (typeof dir === \"object\") {\n    prefix = dir.prefix;\n    dir = dir.path;\n  }\n\n  if (prefix == null) {\n    // no prefix by default\n    prefix = \"\";\n  }\n\n  dir = nodePath.resolve(tagsConfigDirname, dir);\n  let children = taglibFS.curFS.readdirSync(dir);\n\n  for (let i = 0, len = children.length; i < len; i++) {\n    let childFilename = children[i];\n    if (childFilename === \"node_modules\") {\n      continue;\n    }\n\n    let tagName;\n    let tagDef = null;\n    let tagDirname;\n    let tagJsonPath;\n\n    let ext = nodePath.extname(childFilename);\n    if (ext === \".marko\") {\n      tagName = childFilename.slice(0, 0 - ext.length);\n      tagDirname = dir;\n      tagDef = createDefaultTagDef();\n      tagDef.template = nodePath.join(dir, childFilename);\n    } else {\n      tagName = prefix + childFilename;\n\n      tagDirname = nodePath.join(dir, childFilename);\n      tagJsonPath = nodePath.join(tagDirname, \"marko-tag.json\");\n\n      let hasTagJson = false;\n      try {\n        taglibFS.curFS.statSync(tagJsonPath);\n        hasTagJson = true;\n        // eslint-disable-next-line no-empty\n      } catch (_) {}\n      if (hasTagJson) {\n        // marko-tag.json exists in the directory, use that as the tag definition\n        tagDef = jsonFileReader.readFileSync(tagJsonPath);\n      } else {\n        tagJsonPath = null;\n        tagDef = createDefaultTagDef();\n      }\n\n      if (!hasFile(tagDef)) {\n        let fileWasSet = findAndSetFile(tagDef, tagDirname);\n        if (!fileWasSet) {\n          if (hasTagJson) {\n            throw new Error(\n              \"Invalid tag file: \" +\n                tagJsonPath +\n                \". Neither a renderer or a template was found for tag. \" +\n                JSON.stringify(tagDef, null, 2)\n            );\n          } else {\n            // Skip this directory... there doesn't appear to be anything in it\n            continue;\n          }\n        }\n      }\n\n      if (!hasTagJson && (tagDef.renderer || tagDef.template)) {\n        let templateCode = String(\n          taglibFS.curFS.readFileSync(\n            tagDef.renderer || tagDef.template,\n            fsReadOptions\n          )\n        );\n        let extractedTagDef = tagDefFromCode.extractTagDef(templateCode);\n        if (extractedTagDef) {\n          extend(tagDef, extractedTagDef);\n        }\n      }\n    }\n\n    let tagDependencyChain;\n\n    if (tagJsonPath) {\n      tagDependencyChain = dependencyChain.append(tagJsonPath);\n    } else {\n      tagDependencyChain = dependencyChain.append(tagDirname);\n    }\n\n    let tag = new types.Tag(tagJsonPath || tagDirname);\n    loaders.loadTagFromProps(tag, tagDef, tagDependencyChain);\n    tag.name = tag.name || tagName;\n    taglib.addTag(tag);\n  }\n};\n"],"file":"scanTagsDir.js"}