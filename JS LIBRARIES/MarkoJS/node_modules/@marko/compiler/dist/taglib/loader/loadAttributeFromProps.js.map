{"version":3,"sources":["../../../src/taglib/loader/loadAttributeFromProps.js"],"names":["assert","require","raptorRegexp","propertyHandlers","types","createError","hasOwnProperty","Object","prototype","AttrLoader","constructor","attr","dependencyChain","ok","load","attrProps","arguments","length","type","toString","value","charAt","ref","substring","targetProperty","defaultValue","pattern","patternRegExp","simple","name","allowExpressions","preserveName","required","removeDashes","description","setFlag","setContextFlag","ignore","autocomplete","enum","deprecated","html","loadAttributeFromProps","attrName","Attribute","attrLoader","err","isSupportedProperty","call","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar assert = require(\"assert\");\nvar raptorRegexp = require(\"raptor-regexp\");\nvar propertyHandlers = require(\"property-handlers\");\nvar types = require(\"./types\");\nvar createError = require(\"raptor-util/createError\");\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nclass AttrLoader {\n  constructor(attr, dependencyChain) {\n    assert.ok(attr, '\"attr\" is required');\n    assert.ok(dependencyChain, '\"dependencyChain\" is required');\n\n    this.attr = attr;\n    this.dependencyChain = dependencyChain;\n  }\n\n  load(attrProps) {\n    assert.ok(arguments.length === 1);\n\n    if (attrProps == null) {\n      attrProps = {};\n    } else if (typeof attrProps === \"string\") {\n      attrProps = {\n        type: attrProps\n      };\n    } else {\n      assert.ok(typeof attrProps === \"object\", 'Invalid \"attrProps\"');\n    }\n\n    propertyHandlers(attrProps, this, this.dependencyChain.toString());\n  }\n\n  /**\n   * The attribute type. One of the following:\n   * - string (the default)\n   * - expression (a JavaScript expression)\n   * - number\n   * - integer\n   * - int\n   * - boolean\n   * - float\n   * - double\n   * - object\n   * - array\n   *\n   */\n  type(value) {\n    var attr = this.attr;\n    if (value.charAt(0) === \"#\") {\n      attr.ref = value.substring(1);\n    } else {\n      attr.type = value;\n    }\n  }\n\n  /**\n   * The name of the target property to use when mapping\n   * the attribute to a property on the target object.\n   */\n  targetProperty(value) {\n    var attr = this.attr;\n    attr.targetProperty = value;\n  }\n  /**\n   * The \"default-value\" property allows a default value\n   * to be provided when the attribute is not declared\n   * on the custom tag.\n   */\n  defaultValue(value) {\n    var attr = this.attr;\n    attr.defaultValue = value;\n  }\n  /**\n   * The \"pattern\" property allows the attribute\n   * to be matched based on a simplified regular expression.\n   *\n   * Example:\n   *\n   * \"pattern\": \"myprefix-*\"\n   */\n  pattern(value) {\n    var attr = this.attr;\n    if (value === true) {\n      var patternRegExp = raptorRegexp.simple(attr.name);\n      attr.pattern = patternRegExp;\n    }\n  }\n\n  /**\n   * If \"allow-expressions\" is set to true (the default) then\n   * the the attribute value will be parsed to find any dynamic\n   * parts.\n   */\n  allowExpressions(value) {\n    var attr = this.attr;\n    attr.allowExpressions = value;\n  }\n\n  /**\n   * By default, the Marko compiler maps an attribute\n   * to a property by removing all dashes from the attribute\n   * name and converting each character after a dash to\n   * an uppercase character (e.g. \"my-attr\" --> \"myAttr\").\n   *\n   * Setting \"preserve-name\" to true will prevent this from\n   * happening for the attribute.\n   */\n  preserveName(value) {\n    var attr = this.attr;\n    attr.preserveName = value;\n  }\n  /**\n   * Declares an attribute as required. Currently, this is\n   * not enforced and is only used for documentation purposes.\n   *\n   * Example:\n   * \"required\": true\n   */\n  required(value) {\n    var attr = this.attr;\n    attr.required = value === true;\n  }\n  /**\n   * This is the opposite of \"preserve-name\" and will result\n   * in dashes being removed from the attribute if set to true.\n   */\n  removeDashes(value) {\n    var attr = this.attr;\n    attr.removeDashes = value === true;\n  }\n  /**\n   * The description of the attribute. Only used for documentation.\n   */\n  description(value) {\n    this.attr.description = value;\n  }\n\n  /**\n   * The \"set-flag\" property allows a \"flag\" to be added to a Node instance\n   * at compile time if the attribute is found on the node. This is helpful\n   * if an attribute uses a pattern and a transformer wants to have a simple\n   * check to see if the Node has an attribute that matched the pattern.\n   *\n   * Example:\n   *\n   * \"set-flag\": \"myCustomFlag\"\n   *\n   * A Node instance can be checked if it has a flag set as shown below:\n   *\n   * if (node.hasFlag('myCustomFlag')) { ... }\n   *\n   *\n   */\n  setFlag(value) {\n    var attr = this.attr;\n    attr.setFlag = value;\n  }\n\n  /**\n   * The \"set-context-flag\" property allows a \"flag\" to be added to the CompilerContext instance\n   * at compile time if the attribute is found on the node. This is helpful\n   * if an attribute uses a pattern and a transformer wants to have a simple\n   * check to see if any Node in the template has an attribute that matched the pattern.\n   *\n   * Example:\n   *\n   * \"set-context-flag\": \"myCustomFlag\"\n   *\n   * A Node instance can be checked if it has a flag set as shown below:\n   *\n   * if (context.isFlagSet('myCustomFlag')) { ... }\n   *\n   *\n   */\n  setContextFlag(value) {\n    var attr = this.attr;\n    attr.setContextFlag = value;\n  }\n\n  /**\n   * An attribute can be marked for ignore. Ignored attributes\n   * will be ignored during compilation.\n   */\n  ignore(value) {\n    var attr = this.attr;\n    if (value === true) {\n      attr.ignore = true;\n    }\n  }\n\n  autocomplete(value) {\n    this.attr.autocomplete = value;\n  }\n\n  enum(value) {\n    this.attr.enum = value;\n  }\n\n  deprecated(value) {\n    this.attr.deprecated = value;\n  }\n\n  name(value) {\n    this.attr.name = value;\n  }\n\n  html(value) {\n    this.attr.html = value === true;\n  }\n}\n\nfunction loadAttributeFromProps(attrName, attrProps, dependencyChain) {\n  assert.ok(typeof attrName === \"string\");\n  assert.ok(dependencyChain, '\"dependencyChain\" is required');\n\n  var attr = new types.Attribute(attrName);\n\n  var attrLoader = new AttrLoader(attr, dependencyChain);\n\n  try {\n    attrLoader.load(attrProps);\n  } catch (err) {\n    throw createError(\n      'Unable to load attribute \"' +\n        attrName +\n        '\" (' +\n        dependencyChain +\n        \"): \" +\n        err,\n      err\n    );\n  }\n\n  return attr;\n}\n\nloadAttributeFromProps.isSupportedProperty = function (name) {\n  return hasOwnProperty.call(AttrLoader.prototype, name);\n};\n\nmodule.exports = loadAttributeFromProps;\n"],"file":"loadAttributeFromProps.js"}