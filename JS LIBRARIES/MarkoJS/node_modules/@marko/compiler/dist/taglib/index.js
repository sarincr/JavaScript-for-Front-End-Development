"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.buildLookup = buildLookup;exports.register = register;exports.clearCaches = clearCaches;exports._finder = exports._loader = exports.excludePackage = exports.excludeDir = void 0;var _loader2 = _interopRequireDefault(require("./loader"));
var _finder2 = _interopRequireDefault(require("./finder"));
var _lookup = _interopRequireDefault(require("./lookup"));
var _tryLoadTranslator = _interopRequireDefault(require("../util/try-load-translator"));

const excludeDir = _finder2.default.excludeDir;exports.excludeDir = excludeDir;
const excludePackage = _finder2.default.excludePackage;exports.excludePackage = excludePackage;

const registeredTaglibs = [];
const loadedTranslatorsTaglibs = new Map();
let lookupCache = Object.create(null);

register(require.resolve("./marko-html.json"), require("./marko-html.json"));
register(require.resolve("./marko-svg.json"), require("./marko-svg.json"));
register(require.resolve("./marko-math.json"), require("./marko-math.json"));

function buildLookup(dirname, requestedTranslator) {
  const translator = (0, _tryLoadTranslator.default)(requestedTranslator);
  if (!translator || !Array.isArray(translator.taglibs)) {
    throw new Error(
    "@marko/compiler: Invalid translator provided to buildLookup(dir, translator)");

  }

  if (!loadedTranslatorsTaglibs.has(translator)) {
    loadedTranslatorsTaglibs.set(
    translator,
    translator.taglibs.map(([id, props]) => loadTaglib(id, props)));

  }

  const taglibsForDir = _finder2.default.find(
  dirname,
  registeredTaglibs.concat(loadedTranslatorsTaglibs.get(translator)));


  const cacheKey = taglibsForDir.map((it) => it.id).join();
  let lookup = lookupCache[cacheKey];

  if (!lookup) {
    lookup = lookupCache[cacheKey] = new _lookup.default();
    for (const taglib of taglibsForDir) {
      lookup.addTaglib(taglib);
      if (taglib.imports) {
        for (const importedTaglib of taglib.imports) {
          if (!lookup.hasTaglib(importedTaglib)) {
            lookup.addTaglib(importedTaglib);
          }
        }
      }
    }
  }

  return lookup;
}

function register(id, props) {
  registeredTaglibs.push(loadTaglib(id, props));
}

function clearCaches() {
  _loader2.default.clearCache();
  _finder2.default.clearCache();
  lookupCache = Object.create(null);
}

// Used by legacy compiler api.
const _loader = _loader2.default;exports._loader = _loader;
const _finder = _finder2.default;exports._finder = _finder;

function loadTaglib(id, props) {
  return _loader2.default.loadTaglibFromProps(_loader2.default.createTaglib(id), props);
}
//# sourceMappingURL=index.js.map