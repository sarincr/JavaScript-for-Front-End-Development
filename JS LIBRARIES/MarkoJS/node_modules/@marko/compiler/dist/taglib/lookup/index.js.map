{"version":3,"sources":["../../../src/taglib/lookup/index.js"],"names":["ok","require","taglibTypes","extend","hasOwnProperty","Object","prototype","TAG_COMPARATOR","a","b","name","localeCompare","merge","target","source","descs","getOwnPropertyDescriptors","key","desc","writable","sourceVal","value","targetVal","Array","isArray","concat","constructor","defineProperty","TaglibLookup","merged","attributeGroups","taglibsById","_sortedTags","undefined","hasTaglib","taglib","call","id","_mergeNestedTags","Tag","handleNestedTags","tag","parentTagName","nestedTags","nestedTag","fullyQualifiedName","clonedNestedTag","tags","addTaglib","attributes","patternAttributes","getTagsSorted","sortedTags","tagName","push","sort","forEachAttribute","callback","globalAttributes","taglibAttributeGroups","findAttributesForTagName","handleAttr","attrDef","ref","attrName","i","length","attributeGroupName","attributeGroup","forEach","getTag","element","getAttribute","attr","findAttributeForTag","attribute","len","patternAttribute","pattern","test","tryAttribute","toString","keys","join","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,EAA3B;AACA,IAAIE,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAAzB;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,oBAAD,CAApB;AACA,IAAIG,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;;AAEA,SAASG,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC5B,SAAOD,CAAC,CAACE,IAAF,CAAOC,aAAP,CAAqBF,CAAC,CAACC,IAAvB,CAAP;AACD;;AAED,SAASE,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AAC7B,QAAMC,KAAK,GAAGV,MAAM,CAACW,yBAAP,CAAiCF,MAAjC,CAAd;AACA,OAAK,MAAMG,GAAX,IAAkBF,KAAlB,EAAyB;AACvB,UAAMG,IAAI,GAAGH,KAAK,CAACE,GAAD,CAAlB;AACA,QAAIC,IAAI,CAACC,QAAT,EAAmB;AACjB,YAAMC,SAAS,GAAGF,IAAI,CAACG,KAAvB;AACA,YAAMC,SAAS,GAAGT,MAAM,CAACI,GAAD,CAAxB;;AAEA;AACEG,MAAAA,SAAS;AACT,aAAOA,SAAP,KAAqB,QADrB;AAEAE,MAAAA,SAFA;AAGA,aAAOA,SAAP,KAAqB,QAJvB;AAKE;AACAT,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAcM,KAAK,CAACC,OAAN,CAAcF,SAAd;AACVA,QAAAA,SAAS,CAACG,MAAV,CAAiBL,SAAjB,CADU;AAEVG,QAAAA,KAAK,CAACC,OAAN,CAAcJ,SAAd;AACA,SAACE,SAAD,EAAYG,MAAZ,CAAmBL,SAAnB,CADA;AAEAR,QAAAA,KAAK,CAACA,KAAK,CAAC,IAAIU,SAAS,CAACI,WAAd,EAAD,EAA8BJ,SAA9B,CAAN,EAAgDF,SAAhD,CAJT;AAKA;AACD;AACF;;AAEDf,IAAAA,MAAM,CAACsB,cAAP,CAAsBd,MAAtB,EAA8BI,GAA9B,EAAmCC,IAAnC;AACD;;AAED,SAAOL,MAAP;AACD;;AAED;AACA;AACA;AACA;AACA,MAAMe,YAAN,CAAmB;AACjBF,EAAAA,WAAW,GAAG;AACZ,SAAKG,MAAL,GAAc;AACZC,MAAAA,eAAe,EAAE,EADL,EAAd;;AAGA,SAAKC,WAAL,GAAmB,EAAnB;;AAEA,SAAKC,WAAL,GAAmBC,SAAnB;AACD;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAAS;AAChB,WAAO/B,cAAc,CAACgC,IAAf,CAAoB,KAAKL,WAAzB,EAAsCI,MAAM,CAACE,EAA7C,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACH,MAAD,EAAS;AACvB,QAAII,GAAG,GAAGrC,WAAW,CAACqC,GAAtB;AACA;AACA;;AAEA,QAAIV,MAAM,GAAG,KAAKA,MAAlB;;AAEA,aAASW,gBAAT,CAA0BC,GAA1B,EAA+BC,aAA/B,EAA8C;AAC5C,WAAK,MAAMzB,GAAX,IAAkBwB,GAAG,CAACE,UAAtB,EAAkC;AAChC,cAAMC,SAAS,GAAGH,GAAG,CAACE,UAAJ,CAAe1B,GAAf,CAAlB;;AAEA,YAAI4B,kBAAkB,GAAGH,aAAa,GAAG,GAAhB,GAAsBE,SAAS,CAAClC,IAAzD;AACA;AACA;AACA,YAAIoC,eAAe,GAAG,IAAIP,GAAJ,EAAtB;AACApC,QAAAA,MAAM,CAAC2C,eAAD,EAAkBF,SAAlB,CAAN;AACA;AACA;AACAE,QAAAA,eAAe,CAACJ,aAAhB,GAAgCA,aAAhC;AACAI,QAAAA,eAAe,CAACpC,IAAhB,GAAuBmC,kBAAvB;AACAhB,QAAAA,MAAM,CAACkB,IAAP,CAAYF,kBAAZ,IAAkCC,eAAlC;AACAN,QAAAA,gBAAgB,CAACM,eAAD,EAAkBD,kBAAlB,CAAhB;AACD;AACF;;AAED,SAAK,MAAM5B,GAAX,IAAkBkB,MAAM,CAACY,IAAzB,EAA+B;AAC7B,YAAMN,GAAG,GAAGN,MAAM,CAACY,IAAP,CAAY9B,GAAZ,CAAZ;AACAuB,MAAAA,gBAAgB,CAACC,GAAD,EAAMA,GAAG,CAAC/B,IAAV,CAAhB;AACD;AACF;;AAEDsC,EAAAA,SAAS,CAACb,MAAD,EAAS;AAChBnC,IAAAA,EAAE,CAACmC,MAAD,EAAS,sBAAT,CAAF;AACAnC,IAAAA,EAAE,CAACmC,MAAM,CAACE,EAAR,EAAY,sBAAZ,CAAF;;AAEA,QAAIjC,cAAc,CAACgC,IAAf,CAAoB,KAAKL,WAAzB,EAAsCI,MAAM,CAACE,EAA7C,CAAJ,EAAsD;AACpD;AACD;;AAED;;AAEA,SAAKL,WAAL,GAAmBC,SAAnB;;AAEA,SAAKF,WAAL,CAAiBI,MAAM,CAACE,EAAxB,IAA8BF,MAA9B;;AAEAvB,IAAAA,KAAK,CAAC,KAAKiB,MAAN,EAAc;AACjBkB,MAAAA,IAAI,EAAEZ,MAAM,CAACY,IADI;AAEjBE,MAAAA,UAAU,EAAEd,MAAM,CAACc,UAFF;AAGjBC,MAAAA,iBAAiB,EAAEf,MAAM,CAACe,iBAHT;AAIjBpB,MAAAA,eAAe,EAAEK,MAAM,CAACL,eAAP,IAA0B,EAJ1B,EAAd,CAAL;;;AAOA,SAAKQ,gBAAL,CAAsBH,MAAtB;AACD;;AAEDgB,EAAAA,aAAa,GAAG;AACd,QAAIC,UAAU,GAAG,KAAKpB,WAAtB;;AAEA,QAAIoB,UAAU,KAAKnB,SAAnB,EAA8B;AAC5BmB,MAAAA,UAAU,GAAG,KAAKpB,WAAL,GAAmB,EAAhC;AACA,UAAIe,IAAI,GAAG,KAAKlB,MAAL,CAAYkB,IAAvB;AACA,WAAK,IAAIM,OAAT,IAAoBN,IAApB,EAA0B;AACxBK,QAAAA,UAAU,CAACE,IAAX,CAAgBP,IAAI,CAACM,OAAD,CAApB;AACD;AACDD,MAAAA,UAAU,CAACG,IAAX,CAAgBhD,cAAhB;AACD;;AAED,WAAO6C,UAAP;AACD;;AAEDI,EAAAA,gBAAgB,CAACH,OAAD,EAAUI,QAAV,EAAoB;AAClC,QAAIV,IAAI,GAAG,KAAKlB,MAAL,CAAYkB,IAAvB;AACA,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,QAAIW,gBAAgB,GAAG,KAAK7B,MAAL,CAAYoB,UAAnC;AACA,QAAIU,qBAAqB,GAAG,KAAK9B,MAAL,CAAYC,eAAxC;;AAEA,aAAS8B,wBAAT,CAAkCP,OAAlC,EAA2C;AACzC,UAAIZ,GAAG,GAAGM,IAAI,CAACM,OAAD,CAAd;AACA,UAAI,CAACZ,GAAL,EAAU;AACR;AACD;;AAED,eAASoB,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,YAAIA,OAAO,CAACC,GAAZ,EAAiB;AACfD,UAAAA,OAAO,GAAGJ,gBAAgB,CAACI,OAAO,CAACC,GAAT,CAA1B;AACD;AACDN,QAAAA,QAAQ,CAACK,OAAD,EAAUrB,GAAV,CAAR;AACD;;AAED,UAAIQ,UAAU,GAAGR,GAAG,CAACQ,UAArB;AACA,UAAI,CAACA,UAAL,EAAiB;AACf;AACD;;AAED,WAAK,IAAIe,QAAT,IAAqBf,UAArB,EAAiC;AAC/B,YAAI7C,cAAc,CAACgC,IAAf,CAAoBa,UAApB,EAAgCe,QAAhC,CAAJ,EAA+C;AAC7CH,UAAAA,UAAU,CAACZ,UAAU,CAACe,QAAD,CAAX,EAAuBvB,GAAvB,CAAV;AACD;AACF;;AAED,UAAIA,GAAG,CAACX,eAAR,EAAyB;AACvB,aAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,GAAG,CAACX,eAAJ,CAAoBoC,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,cAAIE,kBAAkB,GAAG1B,GAAG,CAACX,eAAJ,CAAoBmC,CAApB,CAAzB;AACA,cAAIG,cAAc,GAAGT,qBAAqB,CAACQ,kBAAD,CAA1C;AACA,cAAIC,cAAJ,EAAoB;AAClB,iBAAK,IAAIJ,QAAT,IAAqBI,cAArB,EAAqC;AACnCP,cAAAA,UAAU,CAACO,cAAc,CAACJ,QAAD,CAAf,CAAV;AACD;AACF;AACF;AACF;;AAED,UAAIvB,GAAG,CAACS,iBAAR,EAA2B;AACzBT,QAAAA,GAAG,CAACS,iBAAJ,CAAsBmB,OAAtB,CAA8BR,UAA9B;AACD;AACF;;AAEDD,IAAAA,wBAAwB,CAACP,OAAD,CAAxB,CAlDkC,CAkDC;AACnCO,IAAAA,wBAAwB,CAAC,GAAD,CAAxB,CAnDkC,CAmDH;AAChC;;AAEDU,EAAAA,MAAM,CAACC,OAAD,EAAU;AACd,QAAIxB,IAAI,GAAG,KAAKlB,MAAL,CAAYkB,IAAvB;AACA,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,WAAOA,IAAI,CAACwB,OAAO,CAAClB,OAAR,IAAmBkB,OAApB,CAAX;AACD;;AAEDC,EAAAA,YAAY,CAACD,OAAD,EAAUE,IAAV,EAAgB;AAC1B,QAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,MAAAA,OAAO,GAAG;AACRlB,QAAAA,OAAO,EAAEkB,OADD,EAAV;;AAGD;;AAED,QAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAG;AACL/D,QAAAA,IAAI,EAAE+D,IADD,EAAP;;AAGD;;AAED,QAAI1B,IAAI,GAAG,KAAKlB,MAAL,CAAYkB,IAAvB;AACA,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,QAAIY,qBAAqB,GAAG,KAAK9B,MAAL,CAAYC,eAAxC;;AAEA,QAAIuB,OAAO,GAAGkB,OAAO,CAAClB,OAAtB;AACA,QAAIW,QAAQ,GAAGS,IAAI,CAAC/D,IAApB;;AAEA,aAASgE,mBAAT,CAA6BjC,GAA7B,EAAkCQ,UAAlC,EAA8Ce,QAA9C,EAAwD;AACtD;AACA,UAAIW,SAAS,GAAG1B,UAAU,CAACe,QAAD,CAA1B;AACA,UAAIW,SAAS,KAAK1C,SAAlB,EAA6B;AAC3B,YAAIQ,GAAG,CAACX,eAAR,EAAyB;AACvB,eAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,GAAG,CAACX,eAAJ,CAAoBoC,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,gBAAIE,kBAAkB,GAAG1B,GAAG,CAACX,eAAJ,CAAoBmC,CAApB,CAAzB;AACA,gBAAIG,cAAc,GAAGT,qBAAqB,CAACQ,kBAAD,CAA1C;AACA,gBAAIC,cAAJ,EAAoB;AAClBO,cAAAA,SAAS,GAAGP,cAAc,CAACJ,QAAD,CAA1B;AACA,kBAAIW,SAAS,KAAK1C,SAAlB,EAA6B;AAC3B;AACD;AACF;AACF;AACF;AACF;;AAED,UAAI0C,SAAS,KAAK1C,SAAd,IAA2B+B,QAAQ,KAAK,GAA5C,EAAiD;AAC/C,YAAIvB,GAAG,CAACS,iBAAR,EAA2B;AACzB;AACA,eAAK,IAAIe,CAAC,GAAG,CAAR,EAAWW,GAAG,GAAGnC,GAAG,CAACS,iBAAJ,CAAsBgB,MAA5C,EAAoDD,CAAC,GAAGW,GAAxD,EAA6DX,CAAC,EAA9D,EAAkE;AAChE,gBAAIY,gBAAgB,GAAGpC,GAAG,CAACS,iBAAJ,CAAsBe,CAAtB,CAAvB;AACA,gBAAIY,gBAAgB,CAACC,OAAjB,CAAyBC,IAAzB,CAA8Bf,QAA9B,CAAJ,EAA6C;AAC3CW,cAAAA,SAAS,GAAGE,gBAAZ;AACA;AACD;AACF;AACF;AACF;;AAED,aAAOF,SAAP;AACD;;AAED,QAAIjB,gBAAgB,GAAG,KAAK7B,MAAL,CAAYoB,UAAnC;;AAEA,aAAS+B,YAAT,CAAsB3B,OAAtB,EAA+BW,QAA/B,EAAyC;AACvC,UAAIvB,GAAG,GAAGM,IAAI,CAACM,OAAD,CAAd;AACA,UAAI,CAACZ,GAAL,EAAU;AACR,eAAOR,SAAP;AACD;;AAED,aAAOyC,mBAAmB,CAACjC,GAAD,EAAMA,GAAG,CAACQ,UAAV,EAAsBe,QAAtB,CAA1B;AACD;;AAED,QAAIF,OAAO;AACTkB,IAAAA,YAAY,CAAC3B,OAAD,EAAUW,QAAV,CAAZ,IAAmC;AACnCgB,IAAAA,YAAY,CAAC,GAAD,EAAMhB,QAAN,CADZ,IAC+B;AAC/BgB,IAAAA,YAAY,CAAC3B,OAAD,EAAU,GAAV,CAHd,CApE0B,CAuEI;;AAE9B,QAAIS,OAAO,IAAIA,OAAO,CAACC,GAAvB,EAA4B;AAC1BD,MAAAA,OAAO,GAAGJ,gBAAgB,CAACI,OAAO,CAACC,GAAT,CAA1B;AACD;;AAED,WAAOD,OAAP;AACD;;AAEDmB,EAAAA,QAAQ,GAAG;AACT,WAAO,aAAa5E,MAAM,CAAC6E,IAAP,CAAY,KAAKnD,WAAjB,EAA8BoD,IAA9B,CAAmC,IAAnC,CAApB;AACD,GArOgB;;;AAwOnBC,MAAM,CAACC,OAAP,GAAiBzD,YAAjB","sourcesContent":["\"use strict\";\n\nvar ok = require(\"assert\").ok;\nvar taglibTypes = require(\"../loader/types\");\nvar extend = require(\"raptor-util/extend\");\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction TAG_COMPARATOR(a, b) {\n  return a.name.localeCompare(b.name);\n}\n\nfunction merge(target, source) {\n  const descs = Object.getOwnPropertyDescriptors(source);\n  for (const key in descs) {\n    const desc = descs[key];\n    if (desc.writable) {\n      const sourceVal = desc.value;\n      const targetVal = target[key];\n\n      if (\n        sourceVal &&\n        typeof sourceVal === \"object\" &&\n        targetVal &&\n        typeof targetVal === \"object\"\n      ) {\n        target[key] = Array.isArray(targetVal)\n          ? targetVal.concat(sourceVal)\n          : Array.isArray(sourceVal)\n          ? [targetVal].concat(sourceVal)\n          : merge(merge(new targetVal.constructor(), targetVal), sourceVal);\n        continue;\n      }\n    }\n\n    Object.defineProperty(target, key, desc);\n  }\n\n  return target;\n}\n\n/**\n * A taglib lookup merges in multiple taglibs so there is a single and fast lookup\n * for custom tags and custom attributes.\n */\nclass TaglibLookup {\n  constructor() {\n    this.merged = {\n      attributeGroups: {}\n    };\n    this.taglibsById = {};\n\n    this._sortedTags = undefined;\n  }\n\n  hasTaglib(taglib) {\n    return hasOwnProperty.call(this.taglibsById, taglib.id);\n  }\n\n  _mergeNestedTags(taglib) {\n    var Tag = taglibTypes.Tag;\n    // Loop over all of the nested tags and register a new custom tag\n    // with the fully qualified name\n\n    var merged = this.merged;\n\n    function handleNestedTags(tag, parentTagName) {\n      for (const key in tag.nestedTags) {\n        const nestedTag = tag.nestedTags[key];\n\n        var fullyQualifiedName = parentTagName + \":\" + nestedTag.name;\n        // Create a clone of the nested tag since we need to add some new\n        // properties\n        var clonedNestedTag = new Tag();\n        extend(clonedNestedTag, nestedTag);\n        // Record the fully qualified name of the parent tag that this\n        // custom tag is associated with.\n        clonedNestedTag.parentTagName = parentTagName;\n        clonedNestedTag.name = fullyQualifiedName;\n        merged.tags[fullyQualifiedName] = clonedNestedTag;\n        handleNestedTags(clonedNestedTag, fullyQualifiedName);\n      }\n    }\n\n    for (const key in taglib.tags) {\n      const tag = taglib.tags[key];\n      handleNestedTags(tag, tag.name);\n    }\n  }\n\n  addTaglib(taglib) {\n    ok(taglib, '\"taglib\" is required');\n    ok(taglib.id, '\"taglib.id\" expected');\n\n    if (hasOwnProperty.call(this.taglibsById, taglib.id)) {\n      return;\n    }\n\n    // console.log(\"TAGLIB:\", taglib);\n\n    this._sortedTags = undefined;\n\n    this.taglibsById[taglib.id] = taglib;\n\n    merge(this.merged, {\n      tags: taglib.tags,\n      attributes: taglib.attributes,\n      patternAttributes: taglib.patternAttributes,\n      attributeGroups: taglib.attributeGroups || {}\n    });\n\n    this._mergeNestedTags(taglib);\n  }\n\n  getTagsSorted() {\n    var sortedTags = this._sortedTags;\n\n    if (sortedTags === undefined) {\n      sortedTags = this._sortedTags = [];\n      var tags = this.merged.tags;\n      for (var tagName in tags) {\n        sortedTags.push(tags[tagName]);\n      }\n      sortedTags.sort(TAG_COMPARATOR);\n    }\n\n    return sortedTags;\n  }\n\n  forEachAttribute(tagName, callback) {\n    var tags = this.merged.tags;\n    if (!tags) {\n      return;\n    }\n\n    var globalAttributes = this.merged.attributes;\n    var taglibAttributeGroups = this.merged.attributeGroups;\n\n    function findAttributesForTagName(tagName) {\n      var tag = tags[tagName];\n      if (!tag) {\n        return;\n      }\n\n      function handleAttr(attrDef) {\n        if (attrDef.ref) {\n          attrDef = globalAttributes[attrDef.ref];\n        }\n        callback(attrDef, tag);\n      }\n\n      var attributes = tag.attributes;\n      if (!attributes) {\n        return;\n      }\n\n      for (var attrName in attributes) {\n        if (hasOwnProperty.call(attributes, attrName)) {\n          handleAttr(attributes[attrName], tag);\n        }\n      }\n\n      if (tag.attributeGroups) {\n        for (let i = 0; i < tag.attributeGroups.length; i++) {\n          let attributeGroupName = tag.attributeGroups[i];\n          let attributeGroup = taglibAttributeGroups[attributeGroupName];\n          if (attributeGroup) {\n            for (let attrName in attributeGroup) {\n              handleAttr(attributeGroup[attrName]);\n            }\n          }\n        }\n      }\n\n      if (tag.patternAttributes) {\n        tag.patternAttributes.forEach(handleAttr);\n      }\n    }\n\n    findAttributesForTagName(tagName); // Look for an exact match at the tag level\n    findAttributesForTagName(\"*\"); // Including attributes that apply to all tags\n  }\n\n  getTag(element) {\n    var tags = this.merged.tags;\n    if (!tags) {\n      return;\n    }\n\n    return tags[element.tagName || element];\n  }\n\n  getAttribute(element, attr) {\n    if (typeof element === \"string\") {\n      element = {\n        tagName: element\n      };\n    }\n\n    if (typeof attr === \"string\") {\n      attr = {\n        name: attr\n      };\n    }\n\n    var tags = this.merged.tags;\n    if (!tags) {\n      return;\n    }\n\n    var taglibAttributeGroups = this.merged.attributeGroups;\n\n    var tagName = element.tagName;\n    var attrName = attr.name;\n\n    function findAttributeForTag(tag, attributes, attrName) {\n      // try by exact match first\n      var attribute = attributes[attrName];\n      if (attribute === undefined) {\n        if (tag.attributeGroups) {\n          for (let i = 0; i < tag.attributeGroups.length; i++) {\n            let attributeGroupName = tag.attributeGroups[i];\n            let attributeGroup = taglibAttributeGroups[attributeGroupName];\n            if (attributeGroup) {\n              attribute = attributeGroup[attrName];\n              if (attribute !== undefined) {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      if (attribute === undefined && attrName !== \"*\") {\n        if (tag.patternAttributes) {\n          // try searching by pattern\n          for (var i = 0, len = tag.patternAttributes.length; i < len; i++) {\n            var patternAttribute = tag.patternAttributes[i];\n            if (patternAttribute.pattern.test(attrName)) {\n              attribute = patternAttribute;\n              break;\n            }\n          }\n        }\n      }\n\n      return attribute;\n    }\n\n    var globalAttributes = this.merged.attributes;\n\n    function tryAttribute(tagName, attrName) {\n      var tag = tags[tagName];\n      if (!tag) {\n        return undefined;\n      }\n\n      return findAttributeForTag(tag, tag.attributes, attrName);\n    }\n\n    var attrDef =\n      tryAttribute(tagName, attrName) || // Look for an exact match at the tag level\n      tryAttribute(\"*\", attrName) || // If not there, see if there is a exact match on the attribute name for attributes that apply to all tags\n      tryAttribute(tagName, \"*\"); // Otherwise, see if there is a splat attribute for the tag\n\n    if (attrDef && attrDef.ref) {\n      attrDef = globalAttributes[attrDef.ref];\n    }\n\n    return attrDef;\n  }\n\n  toString() {\n    return \"lookup: \" + Object.keys(this.taglibsById).join(\", \");\n  }\n}\n\nmodule.exports = TaglibLookup;\n"],"file":"index.js"}