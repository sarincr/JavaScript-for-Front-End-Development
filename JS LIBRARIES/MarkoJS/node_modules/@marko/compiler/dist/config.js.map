{"version":3,"sources":["../src/config.js"],"names":["config","globalThis","window","global","MARKO_CONFIG_KEY","Symbol","output","runtimeId","undefined","ast","code","writeVersionComment","ignoreUnrecognizedTags","sourceMaps","meta","translator","translatorReg","pkg","process","cwd","name","dependencies","test","peerDependencies","devDependencies","fileSystem","CachedInputFileSystem","fs","modules","optimize","resolveVirtualDependency","cache","Map","hydrateIncludeImports","hot","env","MARKO_CONFIG","Object","assign","JSON","parse"],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport { getRootPackage } from \"lasso-package-root\";\nimport { CachedInputFileSystem } from \"enhanced-resolve\";\n\nlet config;\nconst globalThis = typeof window === \"undefined\" ? global : window;\nconst MARKO_CONFIG_KEY = Symbol(\"Default Marko Compiler Config\");\n\nif (globalThis[MARKO_CONFIG_KEY]) {\n  config = globalThis[MARKO_CONFIG_KEY];\n} else {\n  config = globalThis[MARKO_CONFIG_KEY] = {\n    // The default output mode for compiled templates\n    output: \"html\",\n\n    // Override the runtimeid used when calling `marko/components.init` in the `hydrate` output.\n    runtimeId: undefined,\n\n    // Have Marko provide the final AST in the compile result.\n    ast: false,\n\n    // Set the false to have Marko not generate the final code string, useful if just reading metadata or AST.\n    code: true,\n\n    /**\n     * Whether the version should be written to the template as a comment e.g.\n     * // Compiled using marko@x.x.x - DO NOT EDIT\n     */\n    writeVersionComment: true,\n\n    /**\n     * Whether unrecognized tags should be ignored or not. This flag will\n     * be enabled by default when compiling XML.\n     */\n    ignoreUnrecognizedTags: false,\n\n    /**\n     * Whether source maps should be output with the compiled templates.\n     * When `true` a `map` property will be available on the compile result.\n     * When `\"inline\"` the sourcemap will be inlined as a comment in the output code.\n     * When `\"both\"` both of the above will be used.\n     */\n    sourceMaps: false,\n\n    /**\n     * This option inlines all of the meta data in the template.\n     * You can also access this metadata via `compile(...).meta`.\n     * This API is sticking around for compatibility purposes.\n     */\n    meta: false,\n\n    /**\n     * Allows configuring Marko to compile to different runtimes.\n     */\n    translator: (() => {\n      const translatorReg = /^(@\\/marko\\/|marko-)translator-/;\n      let translator = \"@marko/translator-default\";\n      let pkg;\n\n      try {\n        pkg = getRootPackage(process.cwd());\n        // eslint-disable-next-line no-empty\n      } catch {}\n\n      if (pkg) {\n        for (const name in pkg.dependencies) {\n          if (translatorReg.test(name)) {\n            if (translator && translator !== name) {\n              return;\n            }\n\n            translator = name;\n          }\n        }\n\n        for (const name in pkg.peerDependencies) {\n          if (translatorReg.test(name)) {\n            if (translator && translator !== name) {\n              return;\n            }\n\n            translator = name;\n          }\n        }\n\n        for (const name in pkg.devDependencies) {\n          if (translatorReg.test(name)) {\n            if (translator && translator !== name) {\n              return;\n            }\n\n            translator = name;\n          }\n        }\n      }\n\n      return translator;\n    })(),\n\n    /**\n     * Use a different file system object, eg webpacks CachedInputFileSystem or lasso-caching-fs\n     */\n    fileSystem: new CachedInputFileSystem(\n      fs,\n      60000 /* We manually purge but the duration is required */\n    ),\n    /**\n     * By default Marko 5 outputs esm, you can optionally specify commonjs.\n     *\n     * Valid options: esm | cjs\n     */\n    modules: \"esm\",\n\n    /**\n     * Enables production mode optimizations if true, or not if false.\n     * If left as undefined checks for env === \"production\".\n     */\n    optimize: undefined,\n\n    /**\n     * This option should be set if `hydrate` output is specified.\n     * Maps a virtual dependency to a resolved file which can be implemented\n     * for specific bundlers.\n     */\n    resolveVirtualDependency: undefined,\n\n    /**\n     * Compiling a Marko template may require other (used) Marko templates to compile.\n     * To prevent compiling templates more than once, most of the compilation is cached.\n     *\n     * The default cache strategy is to clear the cache on every macrotask.\n     * If the default cache is overwritten it is up to the user to determine when the\n     * cache is cleared.\n     */\n    cache: new Map(),\n\n    /**\n     * A regexp or function that receives an import path that matches file types known to be client side assets.\n     */\n    hydrateIncludeImports:\n      /\\.(css|less|s[ac]ss|styl|png|jpe?g|gif|svg|ico|webp|avif|mp4|webm|ogg|mp3|wav|flac|aac|woff2?|eot|ttf|otf)$/,\n\n    /**\n     * Set to true in order to bring in the hot module replacement runtime.\n     */\n    hot: false\n  };\n\n  if (process.env.MARKO_CONFIG) {\n    Object.assign(config, JSON.parse(process.env.MARKO_CONFIG));\n  }\n}\n\nexport default config;\n\nimport { setFS } from \"./taglib/fs\";\nsetFS(config.fileSystem);\n"],"file":"config.js"}