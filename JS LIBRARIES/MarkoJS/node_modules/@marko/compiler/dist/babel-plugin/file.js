"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule = true;exports.MarkoFile = void 0;var _path = _interopRequireDefault(require("path"));
var _core = require("@babel/core");
var _codeFrame = require("@babel/code-frame");
const CWD = process.cwd();

class MarkoFile extends _core.File {
  addHelper() {
    throw new Error("addHelper is not supported during a Marko transform");
  }

  buildCodeFrameError(node, msg, Error = SyntaxError) {
    const { loc } = node;
    const frame =
    loc &&
    (0, _codeFrame.codeFrameColumns)(
    this.code,
    {
      start: {
        line: loc.start.line,
        column: loc.start.column + 1 },

      end:
      loc.end && loc.start.line === loc.end.line ?
      {
        line: loc.end.line,
        column: loc.end.column + 1 } :

      undefined },

    { highlightCode: true });


    const finalMsg = `${_path.default.relative(CWD, this.opts.filename)}${
    loc ? `(${loc.start.line},${loc.start.column + 1})` : ""
    }: ${msg}\n${frame || ""}`;

    const err = new Error();

    // Prevent babel from changing our error message.
    Object.defineProperty(err, "message", {
      get() {
        return finalMsg;
      },
      set() {} });

    return err;
  }}exports.MarkoFile = MarkoFile;
//# sourceMappingURL=file.js.map