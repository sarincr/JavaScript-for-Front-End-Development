"use strict";exports.__esModule = true;exports.default = void 0;var _babelUtils = require("@marko/babel-utils");
var t = _interopRequireWildcard(require("../../babel-types"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function (nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}var _default =

(file, shorthand, attributes) => {
  if (!shorthand) {
    return attributes;
  }

  const idAttr = attributes.find(({ name }) => name === "id");
  if (idAttr) {
    throw file.buildCodeFrameError(
    idAttr,
    "Cannot have shorthand id and id attribute.");

  }

  const idParts = shorthand.rawParts.map((part) =>
  part.expression ?
  (0, _babelUtils.parseExpression)(file, part.expression, part.pos) :
  (0, _babelUtils.withLoc)(file, t.stringLiteral(part.text), part.pos, part.endPos));


  attributes.push(
  t.markoAttribute(
  "id",
  idParts.length === 1 ?
  idParts[0] :
  idParts.reduce((a, b) => t.binaryExpression("+", a, b))));



  return attributes;
};exports.default = _default;
//# sourceMappingURL=parse-id-shorthand.js.map