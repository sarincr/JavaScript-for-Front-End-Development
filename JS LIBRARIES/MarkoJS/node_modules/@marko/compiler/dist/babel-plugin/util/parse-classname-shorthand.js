"use strict";exports.__esModule = true;exports.default = void 0;var _babelUtils = require("@marko/babel-utils");
var t = _interopRequireWildcard(require("../../babel-types"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function (nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}var _default =

(file, shorthands, attributes) => {
  if (!shorthands) {
    return attributes;
  }

  const classAttr = attributes.find(({ name }) => name === "class");
  const classParts = shorthands.map(({ rawParts }) => {
    const nodes = rawParts.map((part) =>
    part.expression ?
    (0, _babelUtils.parseExpression)(file, part.expression, part.pos) :
    (0, _babelUtils.withLoc)(file, t.stringLiteral(part.text), part.pos, part.endPos));


    if (nodes.length === 1) {
      return nodes[0];
    }

    return nodes.reduce((a, b) => t.binaryExpression("+", a, b));
  });

  let shorthandNode;
  if (classParts.length === 1) {
    shorthandNode = classParts[0];
  } else if (classParts.every((node) => t.isStringLiteral(node))) {
    const combinedStartPos = shorthands[0].rawParts[0].pos;
    const lastParts = shorthands[shorthands.length - 1].rawParts;
    const combinedEndPos = lastParts[lastParts.length - 1].endPos;
    shorthandNode = (0, _babelUtils.withLoc)(
    file,
    t.stringLiteral(classParts.map((node) => node.value).join(" ")),
    combinedStartPos,
    combinedEndPos);

  } else {
    shorthandNode = t.arrayExpression(classParts);
  }

  if (classAttr) {
    if (t.isArrayExpression(classAttr.value)) {
      if (t.isArrayExpression(shorthandNode)) {
        classAttr.value.elements.push(...shorthandNode.elements);
      } else {
        classAttr.value.elements.push(shorthandNode);
      }
    } else if (
    t.isStringLiteral(classAttr.value) &&
    t.isStringLiteral(shorthandNode))
    {
      classAttr.value.value = `${shorthandNode.value} ${classAttr.value.value}`;
    } else if (t.isArrayExpression(shorthandNode)) {
      shorthandNode.elements.push(classAttr.value);
      classAttr.value = shorthandNode;
    } else {
      classAttr.value = t.arrayExpression([shorthandNode, classAttr.value]);
    }
  } else {
    attributes.push(t.markoAttribute("class", shorthandNode));
  }

  return attributes;
};exports.default = _default;
//# sourceMappingURL=parse-classname-shorthand.js.map