{"version":3,"sources":["../../../src/babel-plugin/plugins/migrate.js"],"names":["visitor","MarkoTag","enter","path","migrators","getMigratorsForTag","node","migrator","t","exit","hub","file","watchFiles","metadata","marko","tagName","get","MIGRATOR_CACHE","Object","create","addMigrators","tagDef","push","hook","default"],"mappings":"gEAAA;AACA;AACA,mD;;AAEA;AACA;AACA;AACO,MAAMA,OAAO,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,YAAMC,SAAS,GAAGC,kBAAkB,CAACF,IAAD,CAApC;AACA,YAAM,EAAEG,IAAF,KAAWH,IAAjB;AACA,WAAK,MAAMI,QAAX,IAAuBH,SAAvB,EAAkC;AAChC,gCAAMG,QAAN,EAAgBJ,IAAhB,EAAsBK,CAAtB;AACA,YAAIL,IAAI,CAACG,IAAL,KAAcA,IAAlB,EAAwB,MAFQ,CAED;AAChC;AACF,KARO;AASRG,IAAAA,IAAI,CAACN,IAAD,EAAO;AACT,YAAMC,SAAS,GAAGC,kBAAkB,CAACF,IAAD,CAApC;AACA,YAAM,EAAEG,IAAF,KAAWH,IAAjB;AACA,WAAK,MAAMI,QAAX,IAAuBH,SAAvB,EAAkC;AAChC,+BAAKG,QAAL,EAAeJ,IAAf,EAAqBK,CAArB;AACA,YAAIL,IAAI,CAACG,IAAL,KAAcA,IAAlB,EAAwB,MAFQ,CAED;AAChC;AACF,KAhBO,EADW,EAAhB,C;;;;AAqBP,SAASD,kBAAT,CAA4BF,IAA5B,EAAkC;AAChC,QAAM;AACJO,IAAAA,GAAG,EAAE,EAAEC,IAAF,EADD;AAEFR,EAAAA,IAFJ;AAGA,QAAM,EAAES,UAAF,KAAiBD,IAAI,CAACE,QAAL,CAAcC,KAArC;AACA,QAAMC,OAAO,GAAGZ,IAAI,CAACa,GAAL,CAAS,YAAT,EAAuBV,IAAvB,IAA+B,GAA/C;AACA,QAAMW,cAAc,GAAIN,IAAI,CAACM,cAAL;AACtBN,EAAAA,IAAI,CAACM,cAAL,IAAuBC,MAAM,CAACC,MAAP,CAAc,IAAd,CADzB;;AAGA,MAAIf,SAAS,GAAGa,cAAc,CAACF,OAAD,CAA9B;;AAEA,MAAI,CAACX,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAGa,cAAc,CAACF,OAAD,CAAd,GAA0B,EAAtC;AACA,UAAMK,YAAY,GAAG,CAAAC,MAAM,KAAI;AAC7B,UAAIA,MAAM,IAAIA,MAAM,CAACjB,SAArB,EAAgC;AAC9B,aAAK,MAAMG,QAAX,IAAuBc,MAAM,CAACjB,SAA9B,EAAyC;AACvC,cAAIG,QAAQ,CAACJ,IAAb,EAAmB;AACjBS,YAAAA,UAAU,CAACU,IAAX,CAAgBf,QAAQ,CAACJ,IAAzB;AACD;AACDC,UAAAA,SAAS,CAACkB,IAAV,CAAef,QAAQ,CAACgB,IAAT,CAAcC,OAAd,IAAyBjB,QAAQ,CAACgB,IAAjD;AACD;AACF;AACF,KATD;;AAWAH,IAAAA,YAAY,CAAC,2BAAUjB,IAAV,CAAD,CAAZ;;AAEA,QAAIY,OAAO,KAAK,GAAhB,EAAqB;AACnBK,MAAAA,YAAY,CAAC,qCAAoBT,IAApB,EAA0B,GAA1B,CAAD,CAAZ;AACD;AACF;;AAED,SAAOP,SAAP;AACD","sourcesContent":["import { getTagDef, getTagDefForTagName } from \"@marko/babel-utils\";\nimport * as t from \"../../babel-types\";\nimport { enter, exit } from \"../util/plugin-hooks\";\n\n/**\n * Applies custom migrators on tags.\n */\nexport const visitor = {\n  MarkoTag: {\n    enter(path) {\n      const migrators = getMigratorsForTag(path);\n      const { node } = path;\n      for (const migrator of migrators) {\n        enter(migrator, path, t);\n        if (path.node !== node) break; // Stop if node is replaced.\n      }\n    },\n    exit(path) {\n      const migrators = getMigratorsForTag(path);\n      const { node } = path;\n      for (const migrator of migrators) {\n        exit(migrator, path, t);\n        if (path.node !== node) break; // Stop if node is replaced.\n      }\n    }\n  }\n};\n\nfunction getMigratorsForTag(path) {\n  const {\n    hub: { file }\n  } = path;\n  const { watchFiles } = file.metadata.marko;\n  const tagName = path.get(\"name.value\").node || \"*\";\n  const MIGRATOR_CACHE = (file.MIGRATOR_CACHE =\n    file.MIGRATOR_CACHE || Object.create(null));\n\n  let migrators = MIGRATOR_CACHE[tagName];\n\n  if (!migrators) {\n    migrators = MIGRATOR_CACHE[tagName] = [];\n    const addMigrators = tagDef => {\n      if (tagDef && tagDef.migrators) {\n        for (const migrator of tagDef.migrators) {\n          if (migrator.path) {\n            watchFiles.push(migrator.path);\n          }\n          migrators.push(migrator.hook.default || migrator.hook);\n        }\n      }\n    };\n\n    addMigrators(getTagDef(path));\n\n    if (tagName !== \"*\") {\n      addMigrators(getTagDefForTagName(file, \"*\"));\n    }\n  }\n\n  return migrators;\n}\n"],"file":"migrate.js"}