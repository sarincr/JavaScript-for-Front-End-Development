{"version":3,"sources":["../../../src/babel-plugin/plugins/transform.js"],"names":["visitor","MarkoTag","enter","path","transformers","getTransformersForTag","node","transformer","t","exit","hub","file","watchFiles","metadata","marko","tagName","get","TRANSFORMER_CACHE","Object","create","addTransformers","tagDef","push","hook","default"],"mappings":"gEAAA;AACA;AACA,mD;;AAEA;AACA;AACA;AACO,MAAMA,OAAO,GAAG;AACrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,CAACC,IAAD,EAAO;AACV,YAAMC,YAAY,GAAGC,qBAAqB,CAACF,IAAD,CAA1C;AACA,YAAM,EAAEG,IAAF,KAAWH,IAAjB;;AAEA,WAAK,MAAMI,WAAX,IAA0BH,YAA1B,EAAwC;AACtC,gCAAMG,WAAN,EAAmBJ,IAAnB,EAAyBK,CAAzB;AACA,YAAIL,IAAI,CAACG,IAAL,KAAcA,IAAlB,EAAwB,MAFc,CAEP;AAChC;AACF,KATO;AAURG,IAAAA,IAAI,CAACN,IAAD,EAAO;AACT,YAAMC,YAAY,GAAGC,qBAAqB,CAACF,IAAD,CAA1C;AACA,YAAM,EAAEG,IAAF,KAAWH,IAAjB;;AAEA,WAAK,MAAMI,WAAX,IAA0BH,YAA1B,EAAwC;AACtC,+BAAKG,WAAL,EAAkBJ,IAAlB,EAAwBK,CAAxB;AACA,YAAIL,IAAI,CAACG,IAAL,KAAcA,IAAlB,EAAwB,MAFc,CAEP;AAChC;AACF,KAlBO,EADW,EAAhB,C;;;;AAuBP,SAASD,qBAAT,CAA+BF,IAA/B,EAAqC;AACnC,QAAM;AACJO,IAAAA,GAAG,EAAE,EAAEC,IAAF,EADD;AAEFR,EAAAA,IAFJ;AAGA,QAAM,EAAES,UAAF,KAAiBD,IAAI,CAACE,QAAL,CAAcC,KAArC;AACA,QAAMC,OAAO,GAAGZ,IAAI,CAACa,GAAL,CAAS,YAAT,EAAuBV,IAAvB,IAA+B,GAA/C;AACA,QAAMW,iBAAiB,GAAIN,IAAI,CAACM,iBAAL;AACzBN,EAAAA,IAAI,CAACM,iBAAL,IAA0BC,MAAM,CAACC,MAAP,CAAc,IAAd,CAD5B;;AAGA,MAAIf,YAAY,GAAGa,iBAAiB,CAACF,OAAD,CAApC;;AAEA,MAAI,CAACX,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGa,iBAAiB,CAACF,OAAD,CAAjB,GAA6B,EAA5C;AACA,UAAMK,eAAe,GAAG,CAAAC,MAAM,KAAI;AAChC,UAAIA,MAAM,IAAIA,MAAM,CAACjB,YAArB,EAAmC;AACjC,aAAK,MAAMG,WAAX,IAA0Bc,MAAM,CAACjB,YAAjC,EAA+C;AAC7C,cAAIG,WAAW,CAACJ,IAAhB,EAAsB;AACpBS,YAAAA,UAAU,CAACU,IAAX,CAAgBf,WAAW,CAACJ,IAA5B;AACD;AACDC,UAAAA,YAAY,CAACkB,IAAb,CAAkBf,WAAW,CAACgB,IAAZ,CAAiBC,OAAjB,IAA4BjB,WAAW,CAACgB,IAA1D;AACD;AACF;AACF,KATD;;AAWAH,IAAAA,eAAe,CAAC,2BAAUjB,IAAV,CAAD,CAAf;;AAEA,QAAIY,OAAO,KAAK,GAAhB,EAAqB;AACnBK,MAAAA,eAAe,CAAC,qCAAoBT,IAApB,EAA0B,GAA1B,CAAD,CAAf;AACD;AACF;;AAED,SAAOP,YAAP;AACD","sourcesContent":["import { getTagDef, getTagDefForTagName } from \"@marko/babel-utils\";\nimport * as t from \"../../babel-types\";\nimport { enter, exit } from \"../util/plugin-hooks\";\n\n/**\n * Applies custom transformers on tags.\n */\nexport const visitor = {\n  MarkoTag: {\n    enter(path) {\n      const transformers = getTransformersForTag(path);\n      const { node } = path;\n\n      for (const transformer of transformers) {\n        enter(transformer, path, t);\n        if (path.node !== node) break; // Stop if node is replaced.\n      }\n    },\n    exit(path) {\n      const transformers = getTransformersForTag(path);\n      const { node } = path;\n\n      for (const transformer of transformers) {\n        exit(transformer, path, t);\n        if (path.node !== node) break; // Stop if node is replaced.\n      }\n    }\n  }\n};\n\nfunction getTransformersForTag(path) {\n  const {\n    hub: { file }\n  } = path;\n  const { watchFiles } = file.metadata.marko;\n  const tagName = path.get(\"name.value\").node || \"*\";\n  const TRANSFORMER_CACHE = (file.TRANSFORMER_CACHE =\n    file.TRANSFORMER_CACHE || Object.create(null));\n\n  let transformers = TRANSFORMER_CACHE[tagName];\n\n  if (!transformers) {\n    transformers = TRANSFORMER_CACHE[tagName] = [];\n    const addTransformers = tagDef => {\n      if (tagDef && tagDef.transformers) {\n        for (const transformer of tagDef.transformers) {\n          if (transformer.path) {\n            watchFiles.push(transformer.path);\n          }\n          transformers.push(transformer.hook.default || transformer.hook);\n        }\n      }\n    };\n\n    addTransformers(getTagDef(path));\n\n    if (tagName !== \"*\") {\n      addTransformers(getTagDefForTagName(file, \"*\"));\n    }\n  }\n\n  return transformers;\n}\n"],"file":"transform.js"}