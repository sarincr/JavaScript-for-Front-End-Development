export declare const argv: string[];
export declare function setArguments(...newArguments: any[]): void;
/**
 * Strict expectation one of given commands.
 *
 *     command-line-app install
 *
 *     expect(
 *         {"install": "i"}, - fullname and shirtname
 *         ["update", "u"],  - also fullname and shirtname
 *         "info"            - only one variant of name
 *     )
 *
 * @param  {...Object} names    array of expected tokens
 * @return {String}    fullname
 */
export declare function expect(...names: any[]): string;
/**
 * Strict reading of argument.
 *
 *     command-line-app some-value
 *
 * @return {String} argument
 */
export declare function read(): string;
/**
 * Strict expectation of end.
 * @returns {void}
 */
export declare function end(): void;
/**
 * Strict reading of flags and options.
 *
 *     command-line-app --output test -p es2015,react --verbose
 *
 *     strictOptions([
 *         ["another"]      - for flags array is same as object notation
 *         "verbose"        - only one variant of name
 *     ], [
 *         {"output": "o"}, - fullname and shirtname
 *         ["plugins", "p"] - fullname and shirtname for array
 *     ])
 *
 * @param  {...Object} flagsNames   array of tokens
 * @param  {...Object} optionsNames array of tokens
 * @return {Object}    fullname-value pairs
 */
export declare function strictOptions(flagsNames: any, optionsNames: any): {};
/**
 * Strict reading of options with equal sign.
 * If option is provided without value it will interpreted as `true`.
 *
 *     command-line-app --output=test -p=es2015,react --verbose
 *
 *     strictOptionsEqual(
 *         {"output": "o"},  - fullname and shirtname
 *         ["plugins", "p"], - fullname and shirtname for array
 *         "verbose"         - only one variant of name
 *     )
 *
 * @param  {...Object} names array of tokens
 * @return {Object}    fullname-value pairs
 */
export declare function strictOptionsEqual(...names: any[]): {};
/**
 * Unlimited reading of flags and options.
 *
 *     command-line-app --output test install -p es2015,react babel --verbose
 *
 *     options([
 *         ["another"]      - for flags array is same as object notation
 *         "verbose"        - only one variant of name
 *     ], [
 *         {"output": "o"}, - fullname and shirtname
 *         ["plugins", "p"] - fullname and shirtname for array
 *     ])
 *
 * @param  {...Object} flagsNames   array of tokens
 * @param  {...Object} optionsNames array of tokens
 * @return {Object}    fullname-value pairs
 */
export declare function options(flagsNames: any, optionsNames: any): {};
/**
 * Unlimited reading of with equal sign.
 * If option is provided without value it will interpreted as `true`.
 *
 *     command-line-app --output=test install -p=es2015,react babel --verbose
 *
 *     optionsEqual(
 *         {"output": "o"},  - fullname and shirtname
 *         ["plugins", "p"], - fullname and shirtname for array
 *         "verbose"         - only one variant of name
 *     )
 *
 * @param  {...Object} names array of tokens
 * @return {Object}    fullname-value pairs
 */
export declare function optionsEqual(...names: any[]): {};
