#!/usr/bin/env node

'use strict';

var argueCli = require('argue-cli');
var chalk = require('chalk');
var Table = require('easy-table');
var _ = require('.');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);
var Table__default = /*#__PURE__*/_interopDefaultLegacy(Table);

/* eslint-disable no-console */
const {
  help,
  verbose,
  ...regExpOptions
} = argueCli.options([['help', 'h'], ['verbose', 'v'], 'ignorePatch', 'ignoreMinor', 'allowHigherVersions', 'allowZeroVersions'], []);

if (help) {
  argueCli.end();
  const optionsTable = new Table__default["default"]();
  optionsTable.cell('Option', 'query');
  optionsTable.cell('Description', 'Manually provide a browserslist query.' + ' Specifying this overrides the browserslist configuration specified in your project.');
  optionsTable.newRow();
  optionsTable.cell('Option', '--help, -h');
  optionsTable.cell('Description', 'Print this message.');
  optionsTable.newRow();
  optionsTable.cell('Option', '--verbose, -v');
  optionsTable.cell('Description', 'Print additional info about RegExps.');
  optionsTable.newRow();
  optionsTable.cell('Option', '--ignorePatch');
  optionsTable.cell('Description', 'Ignore differences in patch browser numbers.');
  optionsTable.cell('Default', 'true');
  optionsTable.newRow();
  optionsTable.cell('Option', '--ignoreMinor');
  optionsTable.cell('Description', 'Ignore differences in minor browser versions.');
  optionsTable.cell('Default', 'false');
  optionsTable.newRow();
  optionsTable.cell('Option', '--allowHigherVersions');
  optionsTable.cell('Description', 'For all the browsers in the browserslist query,' + ' return a match if the user agent version is equal to or higher than the one specified in browserslist.');
  optionsTable.cell('Default', 'false');
  optionsTable.newRow();
  optionsTable.cell('Option', '--allowZeroSubversions');
  optionsTable.cell('Description', 'Ignore match of patch or patch and minor, if they are 0.');
  optionsTable.cell('Default', 'false');
  optionsTable.newRow();
  console.log(`\nbrowserslist-useragent-regexp [query] [...options]\n\n${optionsTable.toString()}`);
  process.exit(0);
}

const query = argueCli.argv.length ? argueCli.read() : undefined;
const options = {
  browsers: query,
  ..._.defaultOptions,
  ...regExpOptions
};
argueCli.end();

if (verbose) {
  const browsersList = _.getBrowsersList(options);
  const mergedBrowsers = _.mergeBrowserVersions(browsersList);
  console.log(chalk__default["default"].blue('\n> Browserslist\n'));
  const browsersTable = new Table__default["default"]();
  mergedBrowsers.forEach((versions, browser) => {
    browsersTable.cell('Browser', chalk__default["default"].yellow(browser));
    versions.forEach((version, i) => {
      if (_.isAllVersion(version)) {
        browsersTable.cell(`Version ${i}`, version[0]);
      } else {
        browsersTable.cell(`Version ${i}`, version.join('.'));
      }
    });
    browsersTable.newRow();
  });
  console.log(browsersTable.print());
  const rangedBrowsers = _.browserVersionsToRanges(mergedBrowsers);
  const sourceRegExps = _.getRegExpsForBrowsers(mergedBrowsers, options);
  const versionedRegExps = _.applyVersionsToRegExps(sourceRegExps, rangedBrowsers, options);
  const patchedRegExps = _.patchRegExps(versionedRegExps, mergedBrowsers);
  const optimizedRegExps = _.optimizeAll(patchedRegExps);
  console.log(chalk__default["default"].blue('\n> RegExps\n'));
  optimizedRegExps.forEach(({
    family,
    requestVersionsStrings,
    sourceRegExp,
    resultFixedVersion,
    resultMinVersion,
    resultMaxVersion,
    regExp
  }) => {
    const regExpsTable = new Table__default["default"]();
    regExpsTable.cell('Name', chalk__default["default"].yellow('Family:'));
    regExpsTable.cell('Value', family);
    regExpsTable.newRow();
    regExpsTable.cell('Name', chalk__default["default"].yellow('Versions:'));
    regExpsTable.cell('Value', requestVersionsStrings.join(' '));
    regExpsTable.newRow();
    regExpsTable.cell('Name', chalk__default["default"].yellow('Source RegExp:'));
    regExpsTable.cell('Value', sourceRegExp);
    regExpsTable.newRow();
    regExpsTable.cell('Name', chalk__default["default"].yellow('Source RegExp fixed version:'));
    regExpsTable.cell('Value', resultFixedVersion ? resultFixedVersion.join('.') : '...');
    regExpsTable.newRow();
    let regExpBrowsersVersion = '';

    if (resultMinVersion) {
      regExpBrowsersVersion = resultMinVersion.join('.');
    } else {
      regExpBrowsersVersion = '...';
    }

    regExpBrowsersVersion += ' - ';

    if (resultMaxVersion) {
      regExpBrowsersVersion += resultMaxVersion.join('.');
    } else {
      regExpBrowsersVersion += '...';
    }

    regExpsTable.cell('Name', chalk__default["default"].yellow('Source RegExp browsers versions:'));
    regExpsTable.cell('Value', regExpBrowsersVersion);
    regExpsTable.newRow();
    regExpsTable.cell('Name', chalk__default["default"].yellow('Versioned RegExp:'));
    regExpsTable.cell('Value', regExp);
    regExpsTable.newRow();
    console.log(`${regExpsTable.print()}\n`);
  });
  const regExpStr = _.joinVersionedBrowsersRegExps(optimizedRegExps);
  const regExp = new RegExp(regExpStr);
  console.log(regExp);
  process.exit(0);
}

console.log(_.getUserAgentRegExp(options));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlcyI6W10sInNvdXJjZXNDb250ZW50IjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
