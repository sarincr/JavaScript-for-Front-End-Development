{"version":3,"sources":["../../../src/runtime/vdom/VElement.js"],"names":["domData","require","componentsUtil","vElementByDOMNode","VNode","inherit","ATTR_XLINK_HREF","xmlnsRegExp","hasOwnProperty","Object","prototype","NS_XLINK","NS_HTML","NS_MATH","NS_SVG","DEFAULT_NS","svg","math","FLAG_SIMPLE_ATTRS","FLAG_CUSTOM_ELEMENT","FLAG_SPREAD_ATTRS","defineProperty","ATTR_HREF","EMPTY_OBJECT","freeze","convertAttrValue","type","value","RegExp","source","assign","a","b","key","call","setAttribute","el","namespaceURI","name","setAttributeNS","removeAttribute","removeAttributeNS","VElementClone","other","VElement","tagName","attrs","ownerComponent","childCount","flags","props","constId","i","e","child","n","node","doc","parentNamespaceURI","attributes","createElementNS","attrName","attrValue","defaultValue","set","proto","forEach","get","virtualizeElement","virtualizeChildNodes","attrCount","length","attr","test","nodeName","toLowerCase","vdomEl","fromEl","vFromEl","toEl","removePreservedAttributes","fromFlags","toFlags","oldAttrs","className","id","style","cssText","module","exports"],"mappings":"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","sourcesContent":["/* jshint newcap:false */\n\nvar domData = require(\"../components/dom-data\");\nvar componentsUtil = require(\"../components/util\");\nvar vElementByDOMNode = domData.___vElementByDOMNode;\nvar VNode = require(\"./VNode\");\nvar inherit = require(\"raptor-util/inherit\");\nvar ATTR_XLINK_HREF = \"xlink:href\";\nvar xmlnsRegExp = /^xmlns(:|$)/;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar NS_XLINK = \"http://www.w3.org/1999/xlink\";\nvar NS_HTML = \"http://www.w3.org/1999/xhtml\";\nvar NS_MATH = \"http://www.w3.org/1998/Math/MathML\";\nvar NS_SVG = \"http://www.w3.org/2000/svg\";\nvar DEFAULT_NS = {\n  svg: NS_SVG,\n  math: NS_MATH\n};\n\nvar FLAG_SIMPLE_ATTRS = 1;\nvar FLAG_CUSTOM_ELEMENT = 2;\nvar FLAG_SPREAD_ATTRS = 4;\n\nvar defineProperty = Object.defineProperty;\n\nvar ATTR_HREF = \"href\";\nvar EMPTY_OBJECT = Object.freeze({});\n\nfunction convertAttrValue(type, value) {\n  if (value === true) {\n    return \"\";\n  } else if (type == \"object\") {\n    if (value instanceof RegExp) {\n      return value.source;\n    }\n  }\n\n  return value + \"\";\n}\n\nfunction assign(a, b) {\n  for (var key in b) {\n    if (hasOwnProperty.call(b, key)) {\n      a[key] = b[key];\n    }\n  }\n}\n\nfunction setAttribute(el, namespaceURI, name, value) {\n  if (namespaceURI === null) {\n    el.setAttribute(name, value);\n  } else {\n    el.setAttributeNS(namespaceURI, name, value);\n  }\n}\n\nfunction removeAttribute(el, namespaceURI, name) {\n  if (namespaceURI === null) {\n    el.removeAttribute(name);\n  } else {\n    el.removeAttributeNS(namespaceURI, name);\n  }\n}\n\nfunction VElementClone(other) {\n  this.___firstChildInternal = other.___firstChildInternal;\n  this.___parentNode = null;\n  this.___nextSiblingInternal = null;\n\n  this.___key = other.___key;\n  this.___attributes = other.___attributes;\n  this.___properties = other.___properties;\n  this.___nodeName = other.___nodeName;\n  this.___flags = other.___flags;\n  this.___valueInternal = other.___valueInternal;\n  this.___constId = other.___constId;\n}\n\nfunction VElement(\n  tagName,\n  attrs,\n  key,\n  ownerComponent,\n  childCount,\n  flags,\n  props\n) {\n  this.___VNode(childCount, ownerComponent);\n\n  var constId;\n\n  if (props) {\n    constId = props.i;\n  }\n\n  this.___key = key;\n  this.___flags = flags || 0;\n  this.___attributes = attrs || EMPTY_OBJECT;\n  this.___properties = props || EMPTY_OBJECT;\n  this.___nodeName = tagName;\n  this.___valueInternal = null;\n  this.___constId = constId;\n  this.___preserve = false;\n  this.___preserveBody = false;\n}\n\nVElement.prototype = {\n  ___nodeType: 1,\n\n  ___cloneNode: function () {\n    return new VElementClone(this);\n  },\n\n  /**\n   * Shorthand method for creating and appending an HTML element\n   *\n   * @param  {String} tagName    The tag name (e.g. \"div\")\n   * @param  {int|null} attrCount  The number of attributes (or `null` if not known)\n   * @param  {int|null} childCount The number of child nodes (or `null` if not known)\n   */\n  e: function (tagName, attrs, key, ownerComponent, childCount, flags, props) {\n    var child = this.___appendChild(\n      new VElement(\n        tagName,\n        attrs,\n        key,\n        ownerComponent,\n        childCount,\n        flags,\n        props\n      )\n    );\n\n    if (childCount === 0) {\n      return this.___finishChild();\n    } else {\n      return child;\n    }\n  },\n\n  /**\n   * Shorthand method for creating and appending a static node. The provided node is automatically cloned\n   * using a shallow clone since it will be mutated as a result of setting `nextSibling` and `parentNode`.\n   *\n   * @param  {String} value The value for the new Comment node\n   */\n  n: function (node, ownerComponent) {\n    node = node.___cloneNode();\n    node.___ownerComponent = ownerComponent;\n    this.___appendChild(node);\n    return this.___finishChild();\n  },\n\n  ___actualize: function (doc, parentNamespaceURI) {\n    var tagName = this.___nodeName;\n    var attributes = this.___attributes;\n    var namespaceURI = DEFAULT_NS[tagName] || parentNamespaceURI || NS_HTML;\n\n    var flags = this.___flags;\n    var el = doc.createElementNS(namespaceURI, tagName);\n\n    if (flags & FLAG_CUSTOM_ELEMENT) {\n      assign(el, attributes);\n    } else {\n      for (var attrName in attributes) {\n        var attrValue = attributes[attrName];\n\n        if (attrValue !== false && attrValue != null) {\n          var type = typeof attrValue;\n\n          if (type !== \"string\") {\n            // Special attributes aren't copied to the real DOM. They are only\n            // kept in the virtual attributes map\n            attrValue = convertAttrValue(type, attrValue);\n          }\n\n          if (attrName == ATTR_XLINK_HREF) {\n            setAttribute(el, NS_XLINK, ATTR_HREF, attrValue);\n          } else {\n            el.setAttribute(attrName, attrValue);\n          }\n        }\n      }\n\n      if (tagName === \"textarea\") {\n        el.defaultValue = el.value = this.___value;\n      }\n    }\n\n    vElementByDOMNode.set(el, this);\n\n    return el;\n  },\n\n  ___hasAttribute: function (name) {\n    // We don't care about the namespaces since the there\n    // is no chance that attributes with the same name will have\n    // different namespaces\n    var value = this.___attributes[name];\n    return value != null && value !== false;\n  }\n};\n\ninherit(VElement, VNode);\n\nvar proto = (VElementClone.prototype = VElement.prototype);\n\n[\"checked\", \"selected\", \"disabled\"].forEach(function (name) {\n  defineProperty(proto, name, {\n    get: function () {\n      var value = this.___attributes[name];\n      return value !== false && value != null;\n    }\n  });\n});\n\ndefineProperty(proto, \"___value\", {\n  get: function () {\n    var value = this.___valueInternal;\n    if (value == null) {\n      value = this.___attributes.value;\n    }\n    return value != null && value !== false\n      ? value + \"\"\n      : this.___attributes.type === \"checkbox\" ||\n        this.___attributes.type === \"radio\"\n      ? \"on\"\n      : \"\";\n  }\n});\n\nVElement.___removePreservedAttributes = function (attrs) {\n  // By default this static method is a no-op, but if there are any\n  // compiled components that have \"no-update\" attributes then\n  // `preserve-attrs.js` will be imported and this method will be replaced\n  // with a method that actually does something\n  return attrs;\n};\n\nfunction virtualizeElement(node, virtualizeChildNodes, ownerComponent) {\n  var attributes = node.attributes;\n  var attrCount = attributes.length;\n\n  var attrs = null;\n  var props = null;\n\n  if (attrCount) {\n    attrs = {};\n    for (var i = 0; i < attrCount; i++) {\n      var attr = attributes[i];\n      var attrName = attr.name;\n      if (!xmlnsRegExp.test(attrName)) {\n        if (attrName === \"data-marko\") {\n          props = componentsUtil.___getMarkoPropsFromEl(node);\n        } else if (attr.namespaceURI === NS_XLINK) {\n          attrs[ATTR_XLINK_HREF] = attr.value;\n        } else {\n          attrs[attrName] = attr.value;\n        }\n      }\n    }\n  }\n\n  var tagName = node.nodeName;\n\n  if (node.namespaceURI === NS_HTML) {\n    tagName = tagName.toLowerCase();\n  }\n\n  var vdomEl = new VElement(\n    tagName,\n    attrs,\n    null /*key*/,\n    ownerComponent,\n    0 /*child count*/,\n    0 /*flags*/,\n    props\n  );\n\n  if (vdomEl.___nodeName === \"textarea\") {\n    vdomEl.___valueInternal = node.value;\n  } else if (virtualizeChildNodes) {\n    virtualizeChildNodes(node, vdomEl, ownerComponent);\n  }\n\n  return vdomEl;\n}\n\nVElement.___virtualize = virtualizeElement;\n\nVElement.___morphAttrs = function (fromEl, vFromEl, toEl) {\n  var removePreservedAttributes = VElement.___removePreservedAttributes;\n\n  var fromFlags = vFromEl.___flags;\n  var toFlags = toEl.___flags;\n\n  vElementByDOMNode.set(fromEl, toEl);\n\n  var attrs = toEl.___attributes;\n  var props = toEl.___properties;\n\n  if (toFlags & FLAG_CUSTOM_ELEMENT) {\n    return assign(fromEl, attrs);\n  }\n\n  var attrName;\n\n  // We use expando properties to associate the previous HTML\n  // attributes provided as part of the VDOM node with the\n  // real VElement DOM node. When diffing attributes,\n  // we only use our internal representation of the attributes.\n  // When diffing for the first time it's possible that the\n  // real VElement node will not have the expando property\n  // so we build the attribute map from the expando property\n\n  var oldAttrs = vFromEl.___attributes;\n\n  if (oldAttrs) {\n    if (oldAttrs === attrs) {\n      // For constant attributes the same object will be provided\n      // every render and we can use that to our advantage to\n      // not waste time diffing a constant, immutable attribute\n      // map.\n      return;\n    } else {\n      oldAttrs = removePreservedAttributes(oldAttrs, props);\n    }\n  }\n\n  var attrValue;\n\n  if (toFlags & FLAG_SIMPLE_ATTRS && fromFlags & FLAG_SIMPLE_ATTRS) {\n    if (oldAttrs[\"class\"] !== (attrValue = attrs[\"class\"])) {\n      fromEl.className = attrValue;\n    }\n    if (oldAttrs.id !== (attrValue = attrs.id)) {\n      fromEl.id = attrValue;\n    }\n    if (oldAttrs.style !== (attrValue = attrs.style)) {\n      fromEl.style.cssText = attrValue;\n    }\n    return;\n  }\n\n  // In some cases we only want to set an attribute value for the first\n  // render or we don't want certain attributes to be touched. To support\n  // that use case we delete out all of the preserved attributes\n  // so it's as if they never existed.\n  attrs = removePreservedAttributes(attrs, props, true);\n\n  var namespaceURI;\n\n  // Loop over all of the attributes in the attribute map and compare\n  // them to the value in the old map. However, if the value is\n  // null/undefined/false then we want to remove the attribute\n  for (attrName in attrs) {\n    attrValue = attrs[attrName];\n    namespaceURI = null;\n\n    if (attrName === ATTR_XLINK_HREF) {\n      namespaceURI = NS_XLINK;\n      attrName = ATTR_HREF;\n    }\n\n    if (attrValue == null || attrValue === false) {\n      removeAttribute(fromEl, namespaceURI, attrName);\n    } else if (oldAttrs[attrName] !== attrValue) {\n      var type = typeof attrValue;\n\n      if (type !== \"string\") {\n        attrValue = convertAttrValue(type, attrValue);\n      }\n\n      setAttribute(fromEl, namespaceURI, attrName, attrValue);\n    }\n  }\n\n  // If there are any old attributes that are not in the new set of attributes\n  // then we need to remove those attributes from the target node\n  //\n  // NOTE: We can skip this if the the element is keyed and didn't have spread attributes\n  //       because we know we already processed all of the attributes for\n  //       both the target and original element since target VElement nodes will\n  //       have all attributes declared. However, we can only skip if the node\n  //       was not a virtualized node (i.e., a node that was not rendered by a\n  //       Marko template, but rather a node that was created from an HTML\n  //       string or a real DOM node).\n  if (toEl.___key === null || fromFlags & FLAG_SPREAD_ATTRS) {\n    for (attrName in oldAttrs) {\n      if (!(attrName in attrs)) {\n        if (attrName === ATTR_XLINK_HREF) {\n          fromEl.removeAttributeNS(ATTR_XLINK_HREF, ATTR_HREF);\n        } else {\n          fromEl.removeAttribute(attrName);\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = VElement;\n"],"file":"VElement.js"}