"use strict";var runtime = require(".");
var queueMicrotask = require("../queueMicrotask");
var util = require("../components/util");
var registry = require("../components/registry");
var updateManager = require("../components/update-manager");

var createTemplate = runtime.t;
var createComponent = registry._P_;
var registered = {};
var queue;

runtime.t = function (typeName) {
  if (registered[typeName]) {
    return registered[typeName];
  }

  var renderFn;
  var template = registered[typeName] = createTemplate(typeName);
  var instances = template.bW_ = [];
  Object.defineProperty(template, "_", {
    get: function () {
      return renderFn && proxyRenderer;
    },
    set: function (v) {
      renderFn = v;

      if (instances.length) {
        if (!queue) {
          queue = [];
          queueMicrotask(batchUpdate);
        }

        queue.push(function () {
          var newProto = registry.av_(typeName).prototype;
          instances.forEach(function (instance) {
            if (hasLifecycleChanged(instance.__proto__, newProto)) {
              var startNode = instance.K_.startNode;
              var endNode = instance.K_.endNode;
              var parentNode = startNode.parentNode;
              var curNode;

              instance.bX_ = true;
              instance._a_();
              instance._b_();

              if (instance.L_) {
                instance.L_.removeAllListeners();
                instance.L_ = null;
              }

              while ((curNode = startNode.nextSibling) !== endNode) {
                util.D_(curNode);
                parentNode.removeChild(curNode);
              }

              instance.bX_ = false;
              instance.R_ = false;
            }

            instance.__proto__ = newProto;
            instance._p_(
            instance.Q_, false).
            afterInsert(instance.X_);
          });
        });
      }
    } });


  return template;

  function proxyRenderer() {
    return renderFn.apply(this, arguments);
  }
};

registry._P_ = function (typeName, id) {
  var template = registered[typeName];
  var instance = createComponent(typeName, id);

  if (template) {
    var instances = template.bW_;
    instances.push(instance);
    instance.once("destroy", function () {
      if (!instance.bX_) {
        instances.splice(1, instances.indexOf(instance));
      }
    });
  }

  return instance;
};

function hasLifecycleChanged(oldProto, newProto) {
  return (
    hasMethodChanged("onCreate") ||
    hasMethodChanged("onInput") ||
    hasMethodChanged("onRender") ||
    hasMethodChanged("onMount"));


  function hasMethodChanged(method) {
    return (
      (oldProto[method] && oldProto[method].toString()) !== (
      newProto[method] && newProto[method].toString()));

  }
}

function batchUpdate() {
  updateManager._o_(function () {
    var pending = queue;
    queue = undefined;

    for (var i = 0; i < pending.length; i++) {
      pending[i]();
    }
  });
}

module.exports = runtime;
//# sourceMappingURL=hot-reload.js.map