{"version":3,"sources":["../../../src/runtime/components/State.js"],"names":["extend","require","ensure","state","propertyName","proto","constructor","prototype","Object","defineProperty","get","set","value","State","component","seal","self","newState","key","rawState","undefined","name","shouldEnsure","forceDirty","forcedDirtyState","toJSON","module","exports"],"mappings":"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","sourcesContent":["var extend = require(\"raptor-util/extend\");\n\nfunction ensure(state, propertyName) {\n  var proto = state.constructor.prototype;\n  if (!(propertyName in proto)) {\n    Object.defineProperty(proto, propertyName, {\n      get: function () {\n        return this.___raw[propertyName];\n      },\n      set: function (value) {\n        this.___set(propertyName, value, false /* ensure:false */);\n      }\n    });\n  }\n}\n\nfunction State(component) {\n  this.___component = component;\n  this.___raw = {};\n\n  this.___dirty = false;\n  this.___old = null;\n  this.___changes = null;\n  this.___forced = null; // An object that we use to keep tracking of state properties that were forced to be dirty\n\n  Object.seal(this);\n}\n\nState.prototype = {\n  ___reset: function () {\n    var self = this;\n\n    self.___dirty = false;\n    self.___old = null;\n    self.___changes = null;\n    self.___forced = null;\n  },\n\n  ___replace: function (newState) {\n    var state = this;\n    var key;\n\n    var rawState = this.___raw;\n\n    for (key in rawState) {\n      if (!(key in newState)) {\n        state.___set(\n          key,\n          undefined,\n          false /* ensure:false */,\n          false /* forceDirty:false */\n        );\n      }\n    }\n\n    for (key in newState) {\n      state.___set(\n        key,\n        newState[key],\n        true /* ensure:true */,\n        false /* forceDirty:false */\n      );\n    }\n  },\n  ___set: function (name, value, shouldEnsure, forceDirty) {\n    var rawState = this.___raw;\n\n    if (shouldEnsure) {\n      ensure(this, name);\n    }\n\n    if (forceDirty) {\n      var forcedDirtyState = this.___forced || (this.___forced = {});\n      forcedDirtyState[name] = true;\n    } else if (rawState[name] === value) {\n      return;\n    }\n\n    if (!this.___dirty) {\n      // This is the first time we are modifying the component state\n      // so introduce some properties to do some tracking of\n      // changes to the state\n      this.___dirty = true; // Mark the component state as dirty (i.e. modified)\n      this.___old = rawState;\n      this.___raw = rawState = extend({}, rawState);\n      this.___changes = {};\n      this.___component.___queueUpdate();\n    }\n\n    this.___changes[name] = value;\n\n    if (value === undefined) {\n      // Don't store state properties with an undefined or null value\n      delete rawState[name];\n    } else {\n      // Otherwise, store the new value in the component state\n      rawState[name] = value;\n    }\n  },\n  toJSON: function () {\n    return this.___raw;\n  }\n};\n\nmodule.exports = State;\n"],"file":"State.js"}