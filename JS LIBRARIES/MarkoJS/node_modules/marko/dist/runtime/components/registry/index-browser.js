"use strict";
var queueMicrotask = require("../../queueMicrotask");
var defineComponent = require("../defineComponent");
var initComponents = require("../init-components");
require("../entry");

var registered = {};
var loaded = {};
var componentTypes = {};
var pendingDefs;

function register(type, def) {
  var pendingForType;
  if (pendingDefs) {
    pendingForType = pendingDefs[type];
  }
  registered[type] = def;
  delete loaded[type];
  delete componentTypes[type];

  if (pendingForType) {
    delete pendingDefs[type];
    queueMicrotask(function () {
      pendingForType.forEach(function (args) {
        initComponents.au_(
        args[0],
        args[1],
        args[2],
        args[3])();

      });
    });
  }

  return type;
}

function addPendingDef(def, type, meta, doc, runtimeId) {
  if (!pendingDefs) {
    pendingDefs = {};

    // eslint-disable-next-line no-constant-condition










  }
  (pendingDefs[type] = pendingDefs[type] || []).push([
  def,
  meta,
  doc,
  runtimeId]);

}

function isRegistered(type) {
  return Boolean(registered[type]);
}

function load(typeName) {
  var target = loaded[typeName];
  if (!target) {
    target = registered[typeName];

    if (target) {
      target = target();
    }

    if (!target) {
      throw Error("Component not found: " + typeName);
    }

    loaded[typeName] = target;
  }

  return target;
}

function getComponentClass(typeName) {
  var ComponentClass = componentTypes[typeName];

  if (ComponentClass) {
    return ComponentClass;
  }

  ComponentClass = load(typeName);

  ComponentClass = ComponentClass.Component || ComponentClass;

  if (!ComponentClass.Y_) {
    ComponentClass = defineComponent(ComponentClass, ComponentClass.renderer);
  }

  // Make the component "type" accessible on each component instance
  ComponentClass.prototype._N_ = typeName;

  // eslint-disable-next-line no-constant-condition




























  componentTypes[typeName] = ComponentClass;

  return ComponentClass;
}

function createComponent(typeName, id) {
  var ComponentClass = getComponentClass(typeName);
  return new ComponentClass(id);
}

exports.r = register;
exports.av_ = getComponentClass;
exports._P_ = createComponent;
exports.as_ = isRegistered;
exports.at_ = addPendingDef;
//# sourceMappingURL=index-browser.js.map