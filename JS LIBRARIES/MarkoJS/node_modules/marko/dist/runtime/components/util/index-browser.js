"use strict";var domData = require("../dom-data");
var componentsByDOMNode = domData.E_;
var keysByDOMNode = domData.ag_;
var vElementsByDOMNode = domData.ae_;
var vPropsByDOMNode = domData.ad_;
var markoUID = window.$MUID || (window.$MUID = { i: 0 });
var runtimeId = markoUID.i++;

var componentLookup = {};

var defaultDocument = document;
var EMPTY_OBJECT = {};

function getComponentForEl(el, doc) {
  var node =
  typeof el == "string" ? (doc || defaultDocument).getElementById(el) : el;
  var component;
  var vElement;

  while (node) {
    if (node.fragment) {
      if (node.fragment.endNode === node) {
        node = node.fragment.startNode;
      } else {
        node = node.fragment;
        component = componentsByDOMNode.get(node);
      }
    } else if (vElement = vElementsByDOMNode.get(node)) {
      component = vElement.aA_;
    }

    if (component) {
      return component;
    }

    node = node.previousSibling || node.parentNode;
  }
}

function destroyComponentForNode(node) {
  var componentToDestroy = componentsByDOMNode.get(node.fragment || node);
  if (componentToDestroy) {
    componentToDestroy.Z_();
    delete componentLookup[componentToDestroy.id];
  }
}
function destroyNodeRecursive(node, component) {
  destroyComponentForNode(node);
  if (node.nodeType === 1 || node.nodeType === 12) {
    var key;

    if (component && (key = keysByDOMNode.get(node))) {
      if (node === component.k_[key]) {
        if (componentsByDOMNode.get(node) && /\[\]$/.test(key)) {
          delete component.k_[key][
          componentsByDOMNode.get(node).id];

        } else {
          delete component.k_[key];
        }
      }
    }

    var curChild = node.firstChild;
    while (curChild && curChild !== node.endNode) {
      destroyNodeRecursive(curChild, component);
      curChild = curChild.nextSibling;
    }
  }
}

function nextComponentId() {
  // Each component will get an ID that is unique across all loaded
  // marko runtimes. This allows multiple instances of marko to be
  // loaded in the same window and they should all place nice
  // together
  return "c" + markoUID.i++;
}

function nextComponentIdProvider() {
  return nextComponentId;
}

function attachBubblingEvent(
componentDef,
handlerMethodName,
isOnce,
extraArgs)
{
  if (handlerMethodName) {
    var componentId = componentDef.id;
    if (extraArgs) {
      return [handlerMethodName, componentId, isOnce, extraArgs];
    } else {
      return [handlerMethodName, componentId, isOnce];
    }
  }
}

function getMarkoPropsFromEl(el) {
  var vElement = vElementsByDOMNode.get(el);
  var virtualProps;

  if (vElement) {
    virtualProps = vElement.aB_;
  } else {
    virtualProps = vPropsByDOMNode.get(el);
    if (!virtualProps) {
      virtualProps = el.getAttribute("data-marko");
      vPropsByDOMNode.set(
      el,
      virtualProps = virtualProps ? JSON.parse(virtualProps) : EMPTY_OBJECT);

    }
  }

  return virtualProps;
}

function normalizeComponentKey(key, parentId) {
  if (key[0] === "#") {
    key = key.replace("#" + parentId + "-", "");
  }
  return key;
}

function addComponentRootToKeyedElements(
keyedElements,
key,
rootNode,
componentId)
{
  if (/\[\]$/.test(key)) {
    var repeatedElementsForKey = keyedElements[key] =
    keyedElements[key] || {};
    repeatedElementsForKey[componentId] = rootNode;
  } else {
    keyedElements[key] = rootNode;
  }
}

// eslint-disable-next-line no-constant-condition


























exports.al_ = runtimeId;
exports.C_ = componentLookup;
exports.ah_ = getComponentForEl;
exports.aC_ = destroyComponentForNode;
exports.D_ = destroyNodeRecursive;
exports._T_ = nextComponentIdProvider;
exports._C_ = attachBubblingEvent;
exports.am_ = getMarkoPropsFromEl;
exports.ap_ = addComponentRootToKeyedElements;
exports.aD_ = normalizeComponentKey;
//# sourceMappingURL=index-browser.js.map