{"version":3,"sources":["../../src/node-require/index.js"],"names":["path","require","resolveFrom","requiredCompilerOptions","modules","defaultCompilerOptions","sourceMaps","meta","MARKO_EXTENSIONS","Symbol","normalizeExtension","extension","charAt","compile","templatePath","markoCompiler","userCompilerOptions","compileFileSync","Object","assign","code","install","options","requireExtensions","extensions","compilerOptions","push","concat","length","markoRequireExtension","module","filename","dirname","markoCompilerModulePath","compiledSrc","_compile","forEach","exports","getExtensions"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst complain = \"MARKO_DEBUG\" && require(\"complain\");\nconst path = require(\"path\");\nconst resolveFrom = require(\"resolve-from\");\nconst requiredCompilerOptions = { modules: \"cjs\" };\nconst defaultCompilerOptions = {\n  // eslint-disable-next-line no-constant-condition\n  sourceMaps: \"MARKO_DEBUG\" ? \"inline\" : false,\n  meta: true\n};\nconst MARKO_EXTENSIONS = Symbol(\"MARKO_EXTENSIONS\");\n\n// eslint-disable-next-line no-constant-condition\nif (\"MARKO_DEBUG\") {\n  complain(\n    'Using \"marko/node-require\" has been replaced with \"@marko/compiler/register\".'\n  );\n}\n\nfunction normalizeExtension(extension) {\n  if (extension.charAt(0) !== \".\") {\n    extension = \".\" + extension;\n  }\n  return extension;\n}\n\nfunction compile(templatePath, markoCompiler, userCompilerOptions) {\n  return markoCompiler.compileFileSync(\n    templatePath,\n    Object.assign(\n      {},\n      defaultCompilerOptions,\n      userCompilerOptions,\n      requiredCompilerOptions\n    )\n  ).code;\n}\n\nfunction install(options) {\n  options = options || {};\n\n  var requireExtensions = options.require // options.require introduced for testing\n    ? options.require.extensions\n    : require.extensions;\n\n  var compilerOptions = options.compilerOptions;\n\n  var extensions = [];\n\n  if (options.extension) {\n    extensions.push(options.extension);\n  }\n\n  if (options.extensions) {\n    extensions = extensions.concat(options.extensions);\n  }\n\n  if (extensions.length === 0) {\n    extensions.push(\".marko\");\n  }\n\n  function markoRequireExtension(module, filename) {\n    // Resolve the appropriate compiler relative to the location of the\n    // marko template file on disk using the \"resolve-from\" module.\n    var dirname = path.dirname(filename);\n    var markoCompilerModulePath = resolveFrom(dirname, \"@marko/compiler\");\n    var markoCompiler = require(markoCompilerModulePath);\n\n    // Now use the appropriate Marko compiler to compile the Marko template\n    // file to JavaScript source code:\n    var compiledSrc = compile(filename, markoCompiler, compilerOptions);\n\n    // Append \".js\" to the filename since that is where we write the compiled\n    // source code that is being loaded. This allows stack traces to match up.\n    module._compile(compiledSrc, filename);\n  }\n\n  requireExtensions[MARKO_EXTENSIONS] =\n    requireExtensions[MARKO_EXTENSIONS] ||\n    (requireExtensions[MARKO_EXTENSIONS] = []);\n\n  extensions.forEach(extension => {\n    extension = normalizeExtension(extension);\n    requireExtensions[extension] = markoRequireExtension;\n    requireExtensions[MARKO_EXTENSIONS].push(extension);\n  });\n}\n\ninstall();\n\nexports.install = install;\n\nexports.getExtensions = function () {\n  return require.extensions[MARKO_EXTENSIONS];\n};\n\nrequire(\"./browser-refresh\");\n"],"file":"index.js"}