{"version":3,"sources":["../../src/compiler/config.js"],"names":["config","g","window","global","__MARKO_CONFIG","output","writeVersionComment","ignoreUnrecognizedTags","sourceMaps","meta","process","env","MARKO_CONFIG","Object","assign","JSON","parse","module","exports"],"mappings":"aAAA,IAAIA,MAAJ;;AAEA,IAAIC,CAAC,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,MAAhC,GAAyCD,MAAjD;;AAEA,IAAID,CAAC,CAACG,cAAN,EAAsB;AACpBJ,EAAAA,MAAM,GAAGC,CAAC,CAACG,cAAX;AACD,CAFD,MAEO;AACLJ,EAAAA,MAAM,GAAGC,CAAC,CAACG,cAAF,GAAmB;AAC1B;AACAC,IAAAA,MAAM,EAAE,MAFkB;;AAI1B;AACJ;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,IARK;;AAU1B;AACJ;AACA;AACA;AACIC,IAAAA,sBAAsB,EAAE,KAdE;;AAgB1B;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAtBc;;AAwB1B;AACJ;AACA;AACA;AACA;AACIC,IAAAA,IAAI,EAAE,IA7BoB,EAA5B;;;AAgCA,MAAIC,OAAO,CAACC,GAAR,CAAYC,YAAhB,EAA8B;AAC5BC,IAAAA,MAAM,CAACC,MAAP,CAAcd,MAAd,EAAsBe,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACC,GAAR,CAAYC,YAAvB,CAAtB;AACD;AACF;;AAEDK,MAAM,CAACC,OAAP,GAAiBlB,MAAjB","sourcesContent":["var config;\n\nvar g = typeof window === \"undefined\" ? global : window;\n\nif (g.__MARKO_CONFIG) {\n  config = g.__MARKO_CONFIG;\n} else {\n  config = g.__MARKO_CONFIG = {\n    // The default output mode for compiled templates\n    output: \"html\",\n\n    /**\n     * Whether the version should be written to the template as a comment e.g.\n     * // Compiled using marko@4.0.0 - DO NOT EDIT\n     */\n    writeVersionComment: true,\n\n    /**\n     * Whether unrecognized tags should be ignored or not. This flag will\n     * be enabled by default when compiling XML.\n     */\n    ignoreUnrecognizedTags: false,\n\n    /**\n     * Whether source maps should be output with the compiled templates.\n     * When `true` a `map` property will be available on the compile result.\n     * When `\"inline\"` the sourcemap will be inlined as a comment in the output code.\n     * When `\"both\"` both of the above will be used.\n     */\n    sourceMaps: false,\n\n    /**\n     * This option inlines all of the meta data in the template.\n     * You can also access this metadata via `compile(...).meta`.\n     * This API is sticking around for compatibility purposes.\n     */\n    meta: true\n  };\n\n  if (process.env.MARKO_CONFIG) {\n    Object.assign(config, JSON.parse(process.env.MARKO_CONFIG));\n  }\n}\n\nmodule.exports = config;\n"],"file":"config.js"}